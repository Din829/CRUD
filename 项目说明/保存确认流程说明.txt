目标:
在用户对修改、新增、删除或**复合**操作的预览表示初步同意后，管理后续的暂存、最终确认和执行过程，确保操作的原子性和用户意图的准确传达。

入口:
当主流程将用户的输入（如"保存"、"确认"、"是"）分类为确认意图 (`confirm_other`) 后，进入此流程 (`route_confirmation_entry`)。

流程步骤:

1.  **确认入口决策 (`route_confirmation_entry` 节点 -> `_route_confirmation_entry_logic`):**
    *   检查状态 `save_content` 是否已有值（表示操作已暂存）。
    *   **分支一：未暂存 (`save_content` is None) -> `stage_operation_node`**: 用户首次确认，需暂存操作。
    *   **分支二：已暂存 (`save_content` is not None) -> `check_staged_operation_node`**: 用户进行最终确认。

2.  **尝试暂存 (`stage_operation_node` 节点 -> `_stage_operation_logic`):**
    *   判断哪个预览内容存在 (`content_modify`, `content_new`, `content_combined`, `content_delete`)。
    *   路由到相应的暂存动作节点（如 `stage_modify_action`, `stage_add_action`, `stage_delete_action`, `stage_combined_action`)或错误处理 (`handle_nothing_to_stage_action`)。

3.  **执行暂存 (以复合为例: `stage_combined_action` 节点):**
    *   读取预览内容 (`content_combined`)。
    *   `lastest_content_production` (包含处理后的操作计划) 已由上游节点 (`process_composite_placeholders_action`) 准备好，将用于最终执行。
    *   将预览内容存入待确认状态 (`content_combined`)。
    *   **注意**: `process_composite_placeholders_action` 节点已将处理后的计划存入 `lastest_content_production`。
    *   设置暂存标记 `save_content = "复合路径"`。
    *   向用户发送二次确认请求 (`final_answer`)。
    *   流程结束 (END)，等待用户最终答复。

4.  **检查已暂存状态 (`check_staged_operation_node` 节点 -> `_check_staged_operation_logic`):**
    *   验证 `save_content` 标记与相应的预览内容及待执行数据是否匹配（例如，修改路径对应 `content_modify` 和 `lastest_content_production`；新增路径对应 `content_new` 和 `lastest_content_production`；复合路径对应 `content_combined` 和 `lastest_content_production`；删除路径对应 `content_delete`）。
    *   **分支一：状态一致 -> `ask_confirm_modify_node`**: 进入最终确认环节。
    *   **分支二：状态不一致 -> `handle_invalid_save_state_action`**: 处理无效状态错误。

5.  **询问最终确认 (`ask_confirm_modify_node` 节点 -> `_ask_confirm_modify_logic`):**
    *   调用 LLM 服务 (`llm_flow_control_service.classify_yes_no`) 判断用户答复（"是"/"否"）。
    *   **分支一：用户确认 ("yes") -> `execute_operation_action`**: 执行操作。
    *   **分支二：用户取消 ("no") -> `cancel_save_action`**: 取消操作。

6.  **执行数据库操作 (`execute_operation_action` 节点):**
    *   根据 `save_content` 判断操作类型。对于修改、新增、复合操作：
        *   读取暂存的**待执行负载** (`lastest_content_production`)。
        *   调用相应的 Flask API (`/update_record`, `/insert_record`, `/execute_batch_operations`)。
    *   对于删除操作：
        *   读取 `delete_show` (包含待删除记录预览的JSON字符串), 数据库 Schema (`biaojiegou_save`) 和表名列表 (`table_names`)。
        *   若 `content_delete` 状态为 "未找到需要删除的记录。" 或 `delete_show` 解析后为空（例如，内容为 `'[]'`），则向用户提示无记录可删，并跳过实际 API 调用，将结果标记为成功（无操作）。
        *   调用 `llm_delete_service.parse_delete_ids_direct` 函数，从 `delete_show` (预览结果) 中解析出需要删除的记录的 ID（通常是一个按表名组织的ID列表）。
        *   根据解析出的各表及其对应 ID 列表，逐条构建请求并调用 Flask API `/delete_record` 执行删除。
        *   **注意**: 此删除执行流程当前不直接使用 `delete_array` 状态变量；其原始用途可能已被此解析和逐条调用逻辑取代或需要进一步澄清。
    *   存储 API 结果到 `api_call_result`，并处理 API 调用错误 (`error_message`)。

7.  **重置状态 (`reset_after_operation_action` 节点):**
    *   清空本次操作相关的暂存、预览、计划等状态变量 (包括 `combined_operation_plan`, `content_combined`, `lastest_content_production`)。
    *   **重要说明：** 此处的重置主要针对当前完成的单次操作（如修改、新增、删除、复合）的内部暂存状态，确保这些状态不会影响到下一个*全新的*用户请求的初始阶段。更进一步地，为防止不同独立用户请求之间的最终结果串扰（例如，本次操作的 `final_answer` 错误地作为下一个完全无关请求的答复），图的全局入口节点 (`route_initialization_node`) 会在处理下一个新的用户查询之前，清空诸如 `final_answer` 和 `error_message` 这样的通用反馈状态。

8.  **格式化最终回复 (`format_operation_response_action` 节点):**
    *   调用 LLM 服务 (`llm_flow_control_service.format_api_result`) 根据 `api_call_result` 或 `error_message` 生成最终回复。
    *   存储到 `final_answer`。
    *   流程结束 (END)。

9.  **处理取消 (`cancel_save_action` 节点):**
    *   清空暂存状态。
    *   设置取消确认信息到 `final_answer`。
    *   流程结束 (END)。

10. **处理其他错误 (`handle_nothing_to_stage_action`, `handle_invalid_save_state_action`):**
    *   设置相应的错误信息到 `final_answer`。
    *   流程结束 (END)。

总结:
保存确认流程通过两阶段确认（暂存确认 + 最终确认）和状态标记 (`save_content`)，确保了用户意图的准确执行。它结合了路由逻辑、动作节点和 LLM 服务，实现了从用户确认到数据库操作的完整闭环，并包含了必要的错误处理和针对单次操作内部状态的清理 (`reset_after_operation_action`)。
**结合图入口节点 (`route_initialization_node`) 对通用反馈状态（如 `final_answer`）的清空机制，整个应用能够有效避免不同用户独立请求之间的信息串扰，保证了用户接收到的最终答复的准确性。**复合流程与其他流程共享此确认框架。
