app:
  description: 'author: Ding

    实现表格灵活对应'
  icon: smiling_face_with_3_hearts
  icon_background: '#FFEAD5'
  mode: advanced-chat
  name: CRUD- Ding v0.7（新增）
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/openai:0.0.11@390c87cc0f17370a70d3b214cd71a8de81fe9d6b52e6a38287acde034138b672
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/x:0.0.3@43a3a724a2945f55393b78a3d1868c81ce9394093a8a4d7adee1c3da19f2887c
kind: app
version: 0.1.5
workflow:
  conversation_variables:
  - description: ''
    id: 2bfa5b03-6942-4d36-9c2c-d29cbeb24a30
    name: delete_show
    selector:
    - conversation
    - delete_show
    value: ''
    value_type: string
  - description: ''
    id: 35f52bb5-6615-4226-852f-649df6d01abd
    name: delete_array
    selector:
    - conversation
    - delete_array
    value: []
    value_type: array[string]
  - description: ''
    id: edfda5cf-0fe2-4f0a-bebe-5052fa3fd0f4
    name: data_sample
    selector:
    - conversation
    - data_sample
    value: ''
    value_type: string
  - description: ''
    id: 41d10c54-90b2-4078-8ff2-78dd7168efff
    name: table_names
    selector:
    - conversation
    - table_names
    value: []
    value_type: array[string]
  - description: ''
    id: b5239e75-c361-445e-abf9-f066d8064268
    name: content_delete
    selector:
    - conversation
    - content_delete
    value: ''
    value_type: string
  - description: ''
    id: 690072b3-b837-4a48-8131-a49c08e013ae
    name: content_new
    selector:
    - conversation
    - content_new
    value: ''
    value_type: string
  - description: 记录1-多条最新数据状态
    id: 06c26f26-f5bc-4cd8-883b-cf5c793cba1e
    name: lastest_content_production
    selector:
    - conversation
    - lastest_content_production
    value: []
    value_type: array[string]
  - description: ''
    id: edf253f4-b6bf-4363-aa3f-e7bef9a35131
    name: biaojiegou_save
    selector:
    - conversation
    - biaojiegou_save
    value: ''
    value_type: string
  - description: ''
    id: d2ce6b95-4d6e-4ec2-92ed-0afb528d21dd
    name: save_content
    selector:
    - conversation
    - save_content
    value: ''
    value_type: string
  - description: ''
    id: c51302bc-24d6-4c23-bd37-3c2f781a579e
    name: id_check
    selector:
    - conversation
    - id_check
    value: ''
    value_type: string
  - description: ''
    id: 4e987a00-c041-4f7d-8662-1d5668cefbc9
    name: content_modify
    selector:
    - conversation
    - content_modify
    value: ''
    value_type: string
  environment_variables:
  - description: ''
    id: 1996b6f3-a38e-4041-8d7a-85328176ff94
    name: DB_NAME
    selector:
    - env
    - DB_NAME
    value: sky_take_out
    value_type: string
  - description: ''
    id: e593f790-fd60-43da-9105-909b3e1fc902
    name: DB_PASSWORD
    selector:
    - env
    - DB_PASSWORD
    value: q75946123
    value_type: string
  - description: ''
    id: 5314fe76-2d1f-4474-8748-f5926332e7b4
    name: DB_USER
    selector:
    - env
    - DB_USER
    value: root
    value_type: string
  - description: ''
    id: 1070336a-d614-4f95-b4d9-3fcb94190b01
    name: DB_PORT
    selector:
    - env
    - DB_PORT
    value: '3306'
    value_type: string
  - description: ''
    id: 64e0cc87-040d-4067-9124-a574b08884a9
    name: DB_HOST
    selector:
    - env
    - DB_HOST
    value: 192.168.0.32
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: if-else
      id: 1742268516158-1742272605016-1742272717393-target
      selected: false
      source: '1742268516158'
      sourceHandle: '1742272605016'
      target: '1742272717393'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: code
      id: 1742272764317-true-1742272919748-target
      selected: false
      source: '1742272764317'
      sourceHandle: 'true'
      target: '1742272919748'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1742272919748-source-1742272935164-target
      selected: false
      source: '1742272919748'
      sourceHandle: source
      target: '1742272935164'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: if-else
      id: 1742272717393-false-1742350590415-target
      selected: false
      source: '1742272717393'
      sourceHandle: 'false'
      target: '1742350590415'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: question-classifier
      id: 1742350590415-true-1742350663522-target
      selected: false
      source: '1742350590415'
      sourceHandle: 'true'
      target: '1742350663522'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: assigner
      id: 1742350663522-2-1742350702992-target
      selected: false
      source: '1742350663522'
      sourceHandle: '2'
      target: '1742350702992'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: answer
      id: 1742350702992-source-1742350737329-target
      selected: false
      source: '1742350702992'
      sourceHandle: source
      target: '1742350737329'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: 1742351513942-source-1742354001584-target
      selected: false
      source: '1742351513942'
      sourceHandle: source
      target: '1742354001584'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: assigner
      id: 1742268516158-1742436050605-1742436161345-target
      selected: false
      source: '1742268516158'
      sourceHandle: '1742436050605'
      target: '1742436161345'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: if-else
      id: 1742268516158-1742436518528-1742437386323-target
      selected: false
      source: '1742268516158'
      sourceHandle: '1742436518528'
      target: '1742437386323'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: code
      id: 1742272764317-cd4f781d-9817-4e5b-ae5b-e3b14fba569c-1742438351562-target
      selected: false
      source: '1742272764317'
      sourceHandle: cd4f781d-9817-4e5b-ae5b-e3b14fba569c
      target: '1742438351562'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1742438351562-source-1742438384982-target
      selected: false
      source: '1742438351562'
      sourceHandle: source
      target: '1742438384982'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: answer
      id: 1742438384982-source-1742438414307-target
      selected: false
      source: '1742438384982'
      sourceHandle: source
      target: '1742438414307'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: question-classifier
      id: 1742350590415-e90f63ab-cbb0-433c-81b5-f1fd4a7a9cb2-1742438547791-target
      selected: false
      source: '1742350590415'
      sourceHandle: e90f63ab-cbb0-433c-81b5-f1fd4a7a9cb2
      target: '1742438547791'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: assigner
      id: 1742438547791-2-1742438604112-target
      selected: false
      source: '1742438547791'
      sourceHandle: '2'
      target: '1742438604112'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: answer
      id: 1742438604112-source-1742438635591-target
      selected: false
      source: '1742438604112'
      sourceHandle: source
      target: '1742438635591'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: code
      id: 1742438547791-1-1742438858983-target
      selected: false
      source: '1742438547791'
      sourceHandle: '1'
      target: '1742438858983'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1742438858983-source-1742439055405-target
      selected: false
      source: '1742438858983'
      sourceHandle: source
      target: '1742439055405'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: answer
        targetType: assigner
      id: 1742518495834-source-1742438258005-target
      selected: false
      source: '1742518495834'
      sourceHandle: source
      target: '1742438258005'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: answer
      id: 1742519150567-true-1742518435011-target
      selected: false
      source: '1742519150567'
      sourceHandle: 'true'
      target: '1742518435011'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: answer
      id: 1742437386323-false-1742519704548-target
      selected: false
      source: '1742437386323'
      sourceHandle: 'false'
      target: '1742519704548'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1742520510969-source-1742520588468-target
      selected: false
      source: '1742520510969'
      sourceHandle: source
      target: '1742520588468'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: assigner
      id: 1742520713951-2-1742520757162-target
      selected: false
      source: '1742520713951'
      sourceHandle: '2'
      target: '1742520757162'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: answer
      id: 1742520757162-source-1742520768799-target
      selected: false
      source: '1742520757162'
      sourceHandle: source
      target: '1742520768799'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: question-classifier
      id: 1742350590415-6248dda0-a6e7-40d6-8603-70cd473d6e1c-1742520713951-target
      selected: false
      source: '1742350590415'
      sourceHandle: 6248dda0-a6e7-40d6-8603-70cd473d6e1c
      target: '1742520713951'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: answer
      id: 1742350590415-false-1742608884060-target
      selected: false
      source: '1742350590415'
      sourceHandle: 'false'
      target: '1742608884060'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: assigner
      id: 1742268574820-source-17426938619580-target
      selected: false
      source: '1742268574820'
      sourceHandle: source
      target: '17426938619580'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 1742268541036-source-1742697648839-target
      selected: false
      source: '1742268541036'
      sourceHandle: source
      target: '1742697648839'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: llm
      id: 1742697648839-source-1742268574820-target
      selected: false
      source: '1742697648839'
      sourceHandle: source
      target: '1742268574820'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1742695585674-source-1742873522807-target
      selected: false
      source: '1742695585674'
      sourceHandle: source
      target: '1742873522807'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: code
      id: 1742873006355-source-1742695585674-target
      selected: false
      source: '1742873006355'
      sourceHandle: source
      target: '1742695585674'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: llm
      id: 1742350663522-1-1742351513942-target
      selected: false
      source: '1742350663522'
      sourceHandle: '1'
      target: '1742351513942'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: llm
      id: 1742520713951-1-1743158375055-target
      selected: false
      source: '1742520713951'
      sourceHandle: '1'
      target: '1743158375055'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: 1743158375055-source-1743158495836-target
      selected: false
      source: '1743158375055'
      sourceHandle: source
      target: '1743158495836'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1743158495836-source-1742520996237-target
      selected: false
      source: '1743158495836'
      sourceHandle: source
      target: '1742520996237'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1743158495836-source-1743159266448-target
      selected: false
      source: '1743158495836'
      sourceHandle: source
      target: '1743159266448'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: llm
      id: 1742520588468-source-1743160805827-target
      selected: false
      source: '1742520588468'
      sourceHandle: source
      target: '1743160805827'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: 1743160805827-source-1743160882788-target
      selected: false
      source: '1743160805827'
      sourceHandle: source
      target: '1743160882788'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1743160882788-source-1743160922421-target
      selected: false
      source: '1743160882788'
      sourceHandle: source
      target: '1743160922421'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1743160922421-source-1743161554924-target
      selected: false
      source: '1743160922421'
      sourceHandle: source
      target: '1743161554924'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 1743160922421-source-1743161856302-target
      selected: false
      source: '1743160922421'
      sourceHandle: source
      target: '1743161856302'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: 1743161856302-source-1742520636440-target
      selected: false
      source: '1743161856302'
      sourceHandle: source
      target: '1742520636440'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: 1742607431930-source-1743211489780-target
      selected: false
      source: '1742607431930'
      sourceHandle: source
      target: '1743211489780'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: code
      id: 17426938619580-source-1743382507830-target
      selected: false
      source: '17426938619580'
      sourceHandle: source
      target: '1743382507830'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1743382507830-source-1742873006355-target
      selected: false
      source: '1743382507830'
      sourceHandle: source
      target: '1742873006355'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: start
        targetType: if-else
      id: 1742268499271-source-1743973729940-target
      selected: false
      source: '1742268499271'
      sourceHandle: source
      target: '1743973729940'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: question-classifier
      id: 1743973729940-true-1742268516158-target
      selected: false
      source: '1743973729940'
      sourceHandle: 'true'
      target: '1742268516158'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: code
      id: 1743973729940-false-1742268541036-target
      selected: false
      source: '1743973729940'
      sourceHandle: 'false'
      target: '1742268541036'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: question-classifier
      id: 1742873522807-source-1742268516158-target
      selected: false
      source: '1742873522807'
      sourceHandle: source
      target: '1742268516158'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: llm
      id: 1742437386323-true-1742607431930-target
      selected: false
      source: '1742437386323'
      sourceHandle: 'true'
      target: '1742607431930'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1743211489780-source-1744237287609-target
      selected: false
      source: '1743211489780'
      sourceHandle: source
      target: '1744237287609'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1744237287609-source-1744313625195-target
      selected: false
      source: '1744237287609'
      sourceHandle: source
      target: '1744313625195'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1744313625195-source-1744237356717-target
      selected: false
      source: '1744313625195'
      sourceHandle: source
      target: '1744237356717'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: answer
      id: 1744237356717-fail-branch-1744315485394-target
      selected: false
      source: '1744237356717'
      sourceHandle: fail-branch
      target: '1744315485394'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: if-else
      id: 1742272717393-true-1742272764317-target
      selected: false
      source: '1742272717393'
      sourceHandle: 'true'
      target: '1742272764317'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: code
      id: 1742272764317-false-1742520510969-target
      selected: false
      source: '1742272764317'
      sourceHandle: 'false'
      target: '1742520510969'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: if-else
      id: 1742268516158-1742519512976-1742272717393-target
      source: '1742268516158'
      sourceHandle: '1742519512976'
      target: '1742272717393'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: answer
      id: 1742436161345-source-1742436269084-target
      source: '1742436161345'
      sourceHandle: source
      target: '1742436269084'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: if-else
      id: 17444989103210-source-1742519150567-target
      source: '17444989103210'
      sourceHandle: source
      target: '1742519150567'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1742439055405-source-17444989103210-target
      source: '1742439055405'
      sourceHandle: source
      target: '17444989103210'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1742354001584-source-17444989330050-target
      source: '1742354001584'
      sourceHandle: source
      target: '17444989330050'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1742520996237-source-17444989424110-target
      source: '1742520996237'
      sourceHandle: source
      target: '17444989424110'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: answer
      id: 1742272935164-source-1742272958774-target
      source: '1742272935164'
      sourceHandle: source
      target: '1742272958774'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: llm
      id: 17444989330050-source-1744661636396-target
      source: '17444989330050'
      sourceHandle: source
      target: '1744661636396'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: 1744661636396-source-1742356504777-target
      source: '1744661636396'
      sourceHandle: source
      target: '1742356504777'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 1744237356717-source-1744932102704-target
      source: '1744237356717'
      sourceHandle: source
      target: '1744932102704'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: 1744932102704-source-1742518495834-target
      source: '1744932102704'
      sourceHandle: source
      target: '1742518495834'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: llm
      id: 1742519150567-false-1744932857138-target
      source: '1742519150567'
      sourceHandle: 'false'
      target: '1744932857138'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: 1744932857138-source-1742519180382-target
      source: '1744932857138'
      sourceHandle: source
      target: '1742519180382'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: llm
      id: 17444989424110-source-1744933370451-target
      source: '17444989424110'
      sourceHandle: source
      target: '1744933370451'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: 1744933370451-source-1742521402440-target
      source: '1744933370451'
      sourceHandle: source
      target: '1742521402440'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: 开始节点
        selected: false
        title: 开始
        type: start
        variables: []
      height: 81
      id: '1742268499271'
      position:
        x: -1775.3462985863632
        y: 341.55607869345965
      positionAbsolute:
        x: -1775.3462985863632
        y: 341.55607869345965
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        classes:
        - id: '1'
          name: 查询/分析
        - id: '1742271280811'
          name: 修改
        - id: '1742272605016'
          name: 确认/其他
        - id: '1742436050605'
          name: 重置
        - id: '1742436518528'
          name: 新增
        - id: '1742519512976'
          name: 删除
        desc: 对用户问题进行分类
        instruction: "你是一个智能分类助手。根据用户输入{{#sys.query#}}，按以下规则分类：\n\n1. **查询/分析**：检索记录或分析数据，含关键词：查询、搜索、查找、查、详情、状态、分析、统计、多少、总数等。\n\
          \   - 示例：“查询 TKT-2307-0001 状态”“统计工单数量”\n\n2. **修改**：更改记录，含关键词：修改、更改、变更、更新。\n\
          \   - 示例：“修改 TKT-2307-0001 状态为已解决”\n\n3. **确认/其他**：含关键词：保存、确认、是、好、确定，或无法归类。\
          \ \n  - 示例：“保存”“是”“继续”\n\n4. **重置**：重置或清空，含关键词：重置、重新开始、清空。\n   - 示例：“重置所有数据”\n\
          \n5. **新增**：添加新记录，含关键词：添加、新增、创建（无统计/分析词）。\n   - 示例：“新增一条工单”\n\n6. **删除**：删除记录，含关键词：删除、移除、取消。\n\
          \   - 示例：“删除 TKT-2307-0001”\n\n**规则**：\n- 多特征冲突（如“新增并统计”），优先“查询/分析”。\n-\
          \ “新增”若涉统计/分析，归“查询/分析”。\n- 无法判断，默认“确认/其他”。"
        instructions: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        query_variable_selector:
        - '1742268499271'
        - sys.query
        selected: false
        title: 问题分类器
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 339
      id: '1742268516158'
      position:
        x: 22.04759134228425
        y: 373.16598963654735
      positionAbsolute:
        x: 22.04759134228425
        y: 373.16598963654735
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\n\ndef main() -> dict:\n    # Flask\
          \ 服务端点\n    api_url = \"http://192.168.0.32:5003/get_schema\"\n    \n  \
          \  # 创建请求对象\n    req = urllib.request.Request(api_url, headers={\"Content-Type\"\
          : \"application/json\"})\n    \n    try:\n        # 发送请求并获取响应\n        with\
          \ urllib.request.urlopen(req) as response:\n            # 读取并解码响应\n    \
          \        schema_data = json.loads(response.read().decode('utf-8'))\n   \
          \         \n            # 检查 schema_data 是否为字典\n            if isinstance(schema_data,\
          \ dict):\n                # 将 schema_data 转换为 JSON 字符串列表（与案例一致）\n      \
          \          result_list = [json.dumps(schema_data, ensure_ascii=False)]\n\
          \                return {'result': result_list}  # 返回字符串列表\n           \
          \ else:\n                raise Exception(\"Unexpected response format: Expected\
          \ a dictionary.\")\n    except Exception as e:\n        raise Exception(f\"\
          Error: {str(e)}\")"
        code_language: python3
        desc: 表结构获取
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 表结构获取（多表对应）
        type: code
        variables: []
      height: 81
      id: '1742268541036'
      position:
        x: -1007.4649189781278
        y: 534.1059522402564
      positionAbsolute:
        x: -1007.4649189781278
        y: 534.1059522402564
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1742268541036'
          - result
        desc: 整理表结构信息
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: chatgpt-4o-latest
          provider: langgenius/openai/openai
        prompt_template:
        - id: 2d43387d-6324-4b7d-b074-91011da88051
          role: system
          text: 你是一个数据结构整理助手。
        - id: e7c163c0-bd3b-4da9-b346-66d6e68dedff
          role: user
          text: '以下是从数据库获取的原始表结构 JSON 数据（可能是一个数组）：{{#context#}}

            请从数组中提取第一个 JSON 字符串，并确保输出为一个完整的、有效的 JSON 对象，包含所有表结构信息。

            注意：

            - 输出必须是一个单一的 JSON 对象，格式为 {"table1": {...}, "table2": {...}, ...}。

            - 确保每个表定义之间用逗号分隔，且整体用大括号 {} 包裹。

            - 不得添加换行符、Markdown 标记（如 ```json）或其他非 JSON 字符。

            - 如果输入数据量较大，优先确保 JSON 结构的完整性，避免截断。

            - 如果输入无效或无法解析，返回空对象 "{}"。

            - 在生成 JSON 时，逐表检查，确保每对键值对后添加逗号，最后一表除外。

            示例：

            - 输入：[{"clazz": {"fields": {...}}, "dept": {"fields": {...}}}]

            - 输出：{"clazz": {"fields": {...}}, "dept": {"fields": {...}}}'
        selected: false
        title: 整理表结构信息
        type: llm
        variables: []
        vision:
          enabled: false
      height: 117
      id: '1742268574820'
      position:
        x: -1002.3428721566297
        y: 806.0069721571012
      positionAbsolute:
        x: -1002.3428721566297
        y: 806.0069721571012
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: empty
            id: 6746e7d4-317e-4b97-85ef-5df7745d4796
            value: ''
            varType: string
            variable_selector:
            - conversation
            - save_content
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: 判断修改/新增保存规则
        type: if-else
      height: 125
      id: '1742272717393'
      position:
        x: 420.9278930211327
        y: 1042.3341818332547
      positionAbsolute:
        x: 420.9278930211327
        y: 1042.3341818332547
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: not empty
            id: 377b2699-b8f2-48e8-8d27-73a4c5a63e19
            value: ''
            varType: string
            variable_selector:
            - conversation
            - content_modify
          - comparison_operator: not contains
            id: d566dc98-5404-40b7-860c-2b85cae9a7df
            value: <output>
            varType: string
            variable_selector:
            - conversation
            - lastest_content_production
          id: 'true'
          logical_operator: and
        - case_id: cd4f781d-9817-4e5b-ae5b-e3b14fba569c
          conditions:
          - comparison_operator: empty
            id: 54decf9a-e2b9-41d8-a5fe-d26a9b0b1912
            value: ''
            varType: string
            variable_selector:
            - conversation
            - content_modify
          - comparison_operator: not empty
            id: 28656a8a-ad07-4734-88c9-4e705682869a
            value: ''
            varType: string
            variable_selector:
            - conversation
            - content_new
          id: cd4f781d-9817-4e5b-ae5b-e3b14fba569c
          logical_operator: and
        desc: ''
        selected: false
        title: 条件分支 4
        type: if-else
      height: 225
      id: '1742272764317'
      position:
        x: 810.4700268943384
        y: 1856.9888568236604
      positionAbsolute:
        x: 810.4700268943384
        y: 1856.9888568236604
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "def main() -> dict:\n    return {\n        \"result\": \"修改路径\"\n \
          \   }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 输出保存状态-修改路径
        type: code
        variables: []
      height: 53
      id: '1742272919748'
      position:
        x: 1461.627760276487
        y: 1931.3008859875576
      positionAbsolute:
        x: 1461.627760276487
        y: 1931.3008859875576
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: 将save_content附上‘修改路径’的标签
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1742272919748'
          - result
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 变量赋值 -修改路径
        type: assigner
        version: '2'
      height: 115
      id: '1742272935164'
      position:
        x: 1794.2900693609863
        y: 1919.6884770509846
      positionAbsolute:
        x: 1794.2900693609863
        y: 1919.6884770509846
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '以下是即将保存的信息，请确认，并回复是/否进行修改

          {{#conversation.content_modify#}}

          '
        desc: ''
        selected: false
        title: 直接回复 4
        type: answer
        variables: []
      height: 118
      id: '1742272958774'
      position:
        x: 2243.978778385811
        y: 1919.6884770509846
      positionAbsolute:
        x: 2243.978778385811
        y: 1919.6884770509846
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: contains
            id: d368256f-53f5-4ea9-80bf-9fb4670fa619
            value: 修改路径
            varType: string
            variable_selector:
            - conversation
            - save_content
          - comparison_operator: not empty
            id: 85608773-3d12-492c-b4fd-298f9c02b729
            value: ''
            varType: string
            variable_selector:
            - conversation
            - content_modify
          id: 'true'
          logical_operator: and
        - case_id: e90f63ab-cbb0-433c-81b5-f1fd4a7a9cb2
          conditions:
          - comparison_operator: contains
            id: 35e41a77-cb4a-4a14-8ca0-e9adaa3ef4e1
            value: 新增路径
            varType: string
            variable_selector:
            - conversation
            - save_content
          - comparison_operator: not empty
            id: 9e17df10-ac4d-45a8-91b8-e18f4ae785b5
            value: ''
            varType: string
            variable_selector:
            - conversation
            - content_new
          id: e90f63ab-cbb0-433c-81b5-f1fd4a7a9cb2
          logical_operator: and
        - case_id: 6248dda0-a6e7-40d6-8603-70cd473d6e1c
          conditions:
          - comparison_operator: contains
            id: 1e37681c-28ef-4149-af1a-6c3bede97c13
            value: 删除路径
            varType: string
            variable_selector:
            - conversation
            - save_content
          - comparison_operator: not empty
            id: 964c5964-53c5-4009-ba23-4c9cd05116a5
            value: ''
            varType: string
            variable_selector:
            - conversation
            - delete_show
          id: 6248dda0-a6e7-40d6-8603-70cd473d6e1c
          logical_operator: and
        desc: ''
        selected: false
        title: 判断路径
        type: if-else
      height: 299
      id: '1742350590415'
      position:
        x: 805.0852188168651
        y: 1006.3258339670606
      positionAbsolute:
        x: 805.0852188168651
        y: 1006.3258339670606
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        classes:
        - id: '1'
          name: 是
        - id: '2'
          name: 否
        desc: ''
        instruction: '根据用户输入的内容：{{#sys.query#}}，按照下述规则进行分类：

          1、如果内容是’是‘，或者与之含义相同的表述，则分类为''是''

          2、其余情况一律分类为''否'''
        instructions: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: chatgpt-4o-latest
          provider: langgenius/openai/openai
        query_variable_selector:
        - '1742268499271'
        - sys.query
        selected: false
        title: 是否保存修改
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 167
      id: '1742350663522'
      position:
        x: 1277.2413824957846
        y: 955.5558437274019
      positionAbsolute:
        x: 1277.2413824957846
        y: 955.5558437274019
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: 用户选择否，则清空save变量，不进行更改
        items:
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 变量赋值 6
        type: assigner
        version: '2'
      height: 131
      id: '1742350702992'
      position:
        x: 1611.283678285005
        y: 1064.3321384133308
      positionAbsolute:
        x: 1611.283678285005
        y: 1064.3321384133308
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 由于未收到明确保存指令，保存进程终止，你可以继续编辑内容，或输入‘保存’重启保存流程
        desc: ''
        selected: false
        title: 直接回复 5 取消修改
        type: answer
        variables: []
      height: 131
      id: '1742350737329'
      position:
        x: 1951.2264334661518
        y: 1064.3321384133308
      positionAbsolute:
        x: 1951.2264334661518
        y: 1064.3321384133308
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: chatgpt-4o-latest
          provider: langgenius/openai/openai
        prompt_template:
        - id: 6f180f69-16e8-4cc2-a704-54e7fc9d55a0
          role: system
          text: 根据用户提问{{#sys.query#}} 和输入数据{{#conversation.lastest_content_production#}}
            并参考表结构{{#conversation.biaojiegou_save#}}，表名{{#conversation.table_names#}}，数据示例{{#conversation.data_sample#}}，生成每条记录的表名和字段键值对。
        - id: 8fdeced7-b1dc-499e-b861-67d6acf53430
          role: user
          text: "规则：\n1. 输入数据为 JSON 数组，每项包含：\n   - \"table_name\": 表名。\n   - \"primary_key\"\
            : 主键字段名。\n   - \"primary_value\": 原始主键值（更新时提供，新增时为空）。\n   - \"update_fields\"\
            : 修改字段键值对（如 {\"name\": \"新名称\", \"id\": \"61\"}）。\n2. 从表结构提取：\n   - 主键：\"\
            key\": \"PRI\"。\n   - 必需字段：\"null\": \"NO\"，排除主键和时间戳。\n3. 输出格式：\n   -\
            \ 格式：table_name:primary_key=原始值|field1=value1|field2=value2\n   - 若为主键变更（如\
            \ \"id\": \"61\" 在 update_fields），输出 \"target_<primary_key>=目标值\"。\n \
            \  - 若无原始主键值（新增），省略 \"primary_key=值\"。\n   - 仅输出用户指定的修改字段，忽略未改字段。\n  \
            \ - 多表用换行分隔。\n4. 支持 \"now()\" 表示当前时间。\n5. 特殊情况：\n   - 无效表名：返回 \"无效表名\"\
            。\n   - 无修改字段：返回 \"无修改内容\"。\n6. 输出纯文本，无 Markdown。\n\n示例：\n1. 输入：[{\"table_name\"\
            : \"setmeal\", \"primary_key\": \"id\", \"primary_value\": \"54\", \"\
            update_fields\": {\"id\": \"50\"}}]\n   输出：setmeal:id=54|target_id=50\n\
            2. 输入：[{\"table_name\": \"setmeal\", \"primary_key\": \"id\", \"primary_value\"\
            : \"54\", \"update_fields\": {\"name\": \"新套餐\"}}]\n   输出：setmeal:id=54|name=新套餐\n\
            3. 输入：[{\"table_name\": \"setmeal\", \"primary_key\": \"id\", \"primary_value\"\
            : \"\", \"update_fields\": {\"name\": \"新套餐\"}}]\n   输出：setmeal:|name=新套餐"
        selected: false
        title: LLM 5
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1742351513942'
      position:
        x: 1630.8717750716005
        y: 921.5893495358621
      positionAbsolute:
        x: 1630.8717750716005
        y: 921.5893495358621
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\nfrom datetime import datetime\n\
          \ndef main(content: str, biaojiegou_save: str) -> dict:\n    update_url\
          \ = \"http://192.168.0.32:5003/update_record\"\n    query_url = \"http://192.168.0.32:5003/execute_query\"\
          \n    results = []\n\n    # 解析表结构\n    try:\n        schema_all = json.loads(biaojiegou_save)\n\
          \    except json.JSONDecodeError:\n        return {\"result\": \"表结构解析失败\"\
          }\n\n    schema_cache = {}\n    for table in schema_all:\n        try:\n\
          \            schema_cache[table] = {\n                \"primary_key\": next(field\
          \ for field, info in schema_all[table][\"fields\"].items() if info.get(\"\
          key\") == \"PRI\"),\n                \"numeric_fields\": [field for field,\
          \ info in schema_all[table][\"fields\"].items() if any(t in info.get(\"\
          type\", \"\").lower() for t in [\"int\", \"bigint\", \"decimal\", \"float\"\
          ])],\n                \"date_fields\": [field for field, info in schema_all[table][\"\
          fields\"].items() if \"date\" in info.get(\"type\", \"\").lower()],\n  \
          \              \"required_fields\": [field for field, info in schema_all[table][\"\
          fields\"].items() if info.get(\"null\") == \"NO\" and field != next(field\
          \ for field, info in schema_all[table][\"fields\"].items() if info.get(\"\
          key\") == \"PRI\") and \"timestamp\" not in info.get(\"type\", \"\").lower()],\n\
          \                \"field_types\": {field: info.get(\"type\", \"\").lower()\
          \ for field, info in schema_all[table][\"fields\"].items()},\n         \
          \       \"all_fields\": [field for field, info in schema_all[table][\"fields\"\
          ].items()]\n            }\n        except StopIteration:\n            results.append(f\"\
          {table}: 无法确定主键\")\n            continue\n\n    updates = []\n    for line\
          \ in content.strip().split('\\n'):\n        if not line.strip():\n     \
          \       continue\n        print(f\"Debug - Processing line: '{line}'\")\n\
          \        try:\n            table, fields = line.split(':', 1)\n        \
          \    field_dict = dict(f.split('=', 1) for f in fields.strip().split('|')\
          \ if '=' in f)\n        except ValueError:\n            results.append(f\"\
          格式错误: '{line}'\")\n            continue\n\n        if table not in schema_cache:\n\
          \            results.append(f\"{table}: 无效表名\")\n            continue\n\n\
          \        primary_key = schema_cache[table][\"primary_key\"]\n        numeric_fields\
          \ = schema_cache[table][\"numeric_fields\"]\n        date_fields = schema_cache[table][\"\
          date_fields\"]\n        required_fields = schema_cache[table][\"required_fields\"\
          ]\n        field_types = schema_cache[table][\"field_types\"]\n        all_fields\
          \ = schema_cache[table][\"all_fields\"]\n\n        primary_value = field_dict.get(primary_key,\
          \ '')\n        target_primary_key = f\"target_{primary_key}\"\n        target_value\
          \ = field_dict.get(target_primary_key, '')\n        field_dict.pop(primary_key,\
          \ None)\n        field_dict.pop(target_primary_key, None)\n        update_fields\
          \ = {}\n\n        # 查询现有记录（仅更新时）\n        record = {}\n        if primary_value:\n\
          \            try:\n                query_fields = [f for f in all_fields\
          \ if f != primary_key and not field_types[f].startswith(\"timestamp\")]\n\
          \                if not query_fields:\n                    query_fields\
          \ = required_fields\n                query_fields_str = \", \".join(query_fields)\n\
          \                sql_query = f\"SELECT {query_fields_str} FROM {table} WHERE\
          \ {primary_key} = %s\"\n                params = [primary_value]\n     \
          \           sql_query = sql_query.replace(\"%s\", \"'%s'\")\n          \
          \      sql_query = sql_query % tuple(params)\n                payload =\
          \ {\"sql_query\": sql_query}\n                req = urllib.request.Request(query_url,\
          \ data=json.dumps(payload).encode('utf-8'), headers={\"Content-Type\": \"\
          application/json\"})\n                with urllib.request.urlopen(req, timeout=3)\
          \ as response:\n                    result = json.loads(response.read().decode('utf-8'))\n\
          \                    if result:\n                        record = result[0]\n\
          \                        for field in query_fields:\n                  \
          \          if record[field] is not None:\n                             \
          \   if field in numeric_fields:\n                                    update_fields[field]\
          \ = int(record[field]) if \"decimal\" not in field_types[field] else float(record[field])\n\
          \                                else:\n                               \
          \     update_fields[field] = record[field]\n                    else:\n\
          \                        results.append(f\"{table}: No record found with\
          \ {primary_key}={primary_value}\")\n                        continue\n \
          \           except urllib.error.URLError as e:\n                results.append(f\"\
          {table}: 查询失败: {str(e)}\")\n                continue\n        else:\n  \
          \          # 新增记录，跳过查询\n            pass\n\n        # 处理用户指定的字段\n      \
          \  for field, value in field_dict.items():\n            if field in schema_all[table][\"\
          fields\"]:\n                if value.lower() == \"now()\":\n           \
          \         update_fields[field] = \"now()\"\n                elif field in\
          \ numeric_fields:\n                    try:\n                        update_fields[field]\
          \ = int(value) if \"decimal\" not in field_types[field] else float(value)\n\
          \                    except ValueError:\n                        results.append(f\"\
          {table}: 无效数值: {field}={value}\")\n                        continue\n  \
          \              elif field in date_fields:\n                    value = value.strip()\n\
          \                    try:\n                        dt = datetime.strptime(value,\
          \ \"%Y-%m-%d\")\n                        update_fields[field] = dt.strftime(\"\
          %Y-%m-%d\")\n                    except ValueError:\n                  \
          \      try:\n                            dt = datetime.strptime(value, \"\
          %Y-%m-%d %H:%M:%S\")\n                            update_fields[field] =\
          \ dt.strftime(\"%Y-%m-%d %H:%M:%S\")\n                        except ValueError:\n\
          \                            results.append(f\"{table}: 无效日期格式: {field}={value}\"\
          )\n                            continue\n                else:\n       \
          \             update_fields[field] = value\n\n        # 添加目标主键值（无需唯一性校验）\n\
          \        if target_value:\n            update_fields[primary_key] = target_value\n\
          \n        # 校验必需字段\n        for field in required_fields:\n            if\
          \ field not in update_fields:\n                update_fields[field] = record[field]\
          \ if record.get(field) is not None else None\n            if update_fields[field]\
          \ is None:\n                results.append(f\"{table}: 必需字段 {field} 缺失，无法更新\"\
          )\n                continue\n\n        updates.append({\n            \"\
          table_name\": table,\n            \"primary_key\": primary_key,\n      \
          \      \"primary_value\": primary_value,\n            \"update_fields\"\
          : update_fields\n        })\n\n    if updates:\n        print(f\"Debug -\
          \ Sending update payload: {json.dumps(updates, ensure_ascii=False)}\")\n\
          \        data = json.dumps(updates, ensure_ascii=False).encode('utf-8')\n\
          \        req = urllib.request.Request(update_url, data=data, headers={\"\
          Content-Type\": \"application/json\"})\n        try:\n            with urllib.request.urlopen(req,\
          \ timeout=5) as response:\n                result = json.loads(response.read().decode('utf-8'))\n\
          \                for res in result:\n                    if \"error\" in\
          \ res:\n                        results.append(f\"{res['table_name']} {res['primary_key']}={res['primary_value']}:\
          \ {res['error']}\")\n                    else:\n                       \
          \ results.append(f\"{res['table_name']} {res['primary_key']}={res['primary_value']}:\
          \ {res['message']}\")\n        except urllib.error.URLError as e:\n    \
          \        results.append(f\"更新请求失败: {str(e)}\")\n\n    return {\"result\"\
          : \"\\n\".join(results)}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 链接数据库进行修改
        type: code
        variables:
        - value_selector:
          - '1742351513942'
          - text
          variable: content
        - value_selector:
          - conversation
          - biaojiegou_save
          variable: biaojiegou_save
      height: 53
      id: '1742354001584'
      position:
        x: 1965.4617361372593
        y: 921.5893495358621
      positionAbsolute:
        x: 1965.4617361372593
        y: 921.5893495358621
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1744661636396.text#}}

          '
        desc: ''
        selected: false
        title: 直接回复 7
        type: answer
        variables: []
      height: 102
      id: '1742356504777'
      position:
        x: 3034.01319090172
        y: 921.5893495358621
      positionAbsolute:
        x: 3034.01319090172
        y: 921.5893495358621
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_modify
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - delete_show
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - lastest_content_production
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_new
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 重置检索结果
        type: assigner
        version: '2'
      height: 199
      id: '1742436161345'
      position:
        x: 668.2651670318155
        y: 341.55607869345965
      positionAbsolute:
        x: 668.2651670318155
        y: 341.55607869345965
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 之前检索到的文档块不再被作为修改目标
        desc: ''
        selected: false
        title: 直接回复 -重置
        type: answer
        variables: []
      height: 115
      id: '1742436269084'
      position:
        x: 1100.6774980715868
        y: 341.55607869345965
      positionAbsolute:
        x: 1100.6774980715868
        y: 341.55607869345965
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: empty
            id: 516eac5f-7360-4b31-bd99-9792a3d1278d
            value: ''
            varType: string
            variable_selector:
            - conversation
            - content_new
          - comparison_operator: empty
            id: 5f9e56e8-70e0-408b-98ef-eb7867ce0393
            value: ''
            varType: string
            variable_selector:
            - conversation
            - save_content
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: 判断是否可以新增
        type: if-else
      height: 151
      id: '1742437386323'
      position:
        x: 668.2651670318155
        y: 614.2068653358485
      positionAbsolute:
        x: 668.2651670318155
        y: 614.2068653358485
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1744237356717'
          - result
          variable_selector:
          - conversation
          - lastest_content_production
          write_mode: over-write
        - input_type: variable
          operation: over-write
          value:
          - '1744932102704'
          - text
          variable_selector:
          - conversation
          - content_new
          write_mode: over-write
        selected: false
        title: 变量赋值 10
        type: assigner
        version: '2'
      height: 115
      id: '1742438258005'
      position:
        x: 4020.4212808308007
        y: 565.655871064894
      positionAbsolute:
        x: 4020.4212808308007
        y: 565.655871064894
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "def main() -> dict:\n    return {\n        \"result\": \"新增路径\"\n \
          \   }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 输出保存状态-新增路径
        type: code
        variables: []
      height: 53
      id: '1742438351562'
      position:
        x: 1454.663355770118
        y: 2065.087313025771
      positionAbsolute:
        x: 1454.663355770118
        y: 2065.087313025771
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1742438351562'
          - result
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 变量赋值 - 新增路径
        type: assigner
        version: '2'
      height: 87
      id: '1742438384982'
      position:
        x: 1758.663355770118
        y: 2065.087313025771
      positionAbsolute:
        x: 1758.663355770118
        y: 2065.087313025771
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '以下是要添加的信息，请确认，并回复是/否进行新增

          {{#conversation.content_new#}}'
        desc: ''
        selected: false
        title: 直接回复 10
        type: answer
        variables: []
      height: 118
      id: '1742438414307'
      position:
        x: 2064.8194457501186
        y: 2065.087313025771
      positionAbsolute:
        x: 2064.8194457501186
        y: 2065.087313025771
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        classes:
        - id: '1'
          name: 是
        - id: '2'
          name: 否
        desc: ''
        instruction: '根据用户输入的内容：{{#sys.query#}}，按照下述规则进行分类：

          1、如果内容是’是‘，或者与之含义相同的表述，则分类为''是''

          2、其余情况一律分类为''否'''
        instructions: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gpt-4o-mini
          provider: langgenius/openai/openai
        query_variable_selector:
        - '1742268499271'
        - sys.query
        selected: false
        title: 是否保存新增
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 167
      id: '1742438547791'
      position:
        x: 1277.2413824957846
        y: 1235.825955486411
      positionAbsolute:
        x: 1277.2413824957846
        y: 1235.825955486411
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 变量赋值 12
        type: assigner
        version: '2'
      height: 87
      id: '1742438604112'
      position:
        x: 1611.283678285005
        y: 1414.6805103346376
      positionAbsolute:
        x: 1611.283678285005
        y: 1414.6805103346376
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 由于未收到明确的保存指令，保存进程终止。你可以继续编辑内容，或者输入'保存'重启保存进程
        desc: ''
        selected: false
        title: 直接回复 11 取消新增
        type: answer
        variables: []
      height: 131
      id: '1742438635591'
      position:
        x: 1928.9594780011666
        y: 1414.6805103346376
      positionAbsolute:
        x: 1928.9594780011666
        y: 1414.6805103346376
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef main(content_array: list) -> dict:\n    # 检查输入是否为空\n\
          \    if not content_array or len(content_array) == 0:\n        return {\"\
          result\": \"[]\"}\n    \n    # 将每个字符串元素解析为字典\n    parsed_array = []\n  \
          \  for item in content_array:\n        if isinstance(item, str):\n     \
          \       try:\n                parsed_item = json.loads(item)\n         \
          \       parsed_array.append(parsed_item)\n            except json.JSONDecodeError\
          \ as e:\n                return {\"result\": f\"解析错误: {str(e)}\"}\n    \
          \    else:\n            parsed_array.append(item)\n    \n    # 将解析后的列表序列化为\
          \ JSON 字符串\n    result = json.dumps(parsed_array, ensure_ascii=False)\n\
          \    return {\"result\": result}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 清理LLM输出-新增内容
        type: code
        variables:
        - value_selector:
          - conversation
          - lastest_content_production
          variable: content_array
      height: 53
      id: '1742438858983'
      position:
        x: 1604.6242835066028
        y: 1252.999605636577
      positionAbsolute:
        x: 1604.6242835066028
        y: 1252.999605636577
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\nimport os\n\ndef main(content:\
          \ str) -> dict:\n    print(f\"原始输入 content: {content}\")  # 调试日志\n    try:\n\
          \        content_array = json.loads(content)\n        if not isinstance(content_array,\
          \ list):\n            return {\"result\": \"输入内容必须是列表\"}\n    except Exception\
          \ as e:\n        return {\"result\": f\"解析错误: {str(e)}\"}\n\n    if not\
          \ content_array:\n        return {\"result\": \"无数据可插入\"}\n\n    api_url\
          \ = os.getenv(\"INSERT_API_URL\", \"http://192.168.0.32:5003/insert_record\"\
          )\n    \n    payload = content_array\n    print(f\"发送的 payload: {payload}\"\
          )  # 调试日志\n    data = json.dumps(payload).encode('utf-8')\n    print(f\"\
          发送的 JSON 数据: {data.decode('utf-8')}\")  # 调试日志\n    \n    req = urllib.request.Request(api_url,\
          \ data=data, headers={\"Content-Type\": \"application/json\"})\n    \n \
          \   try:\n        with urllib.request.urlopen(req) as response:\n      \
          \      result = json.loads(response.read().decode('utf-8'))\n          \
          \  return {\"result\": result.get(\"message\", \"新增成功\")}\n    except Exception\
          \ as e:\n        return {\"result\": f\"新增失败: {str(e)}\"}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 代码执行 9 - 新增数据
        type: code
        variables:
        - value_selector:
          - '1742438858983'
          - result
          variable: content
      height: 53
      id: '1742439055405'
      position:
        x: 1921.0424305365295
        y: 1252.999605636577
      positionAbsolute:
        x: 1921.0424305365295
        y: 1252.999605636577
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1742439055405.result#}}'
        desc: ''
        selected: false
        title: 直接回复 12
        type: answer
        variables: []
      height: 102
      id: '1742518435011'
      position:
        x: 3364.6008501339543
        y: 1208.1771012506724
      positionAbsolute:
        x: 3364.6008501339543
        y: 1208.1771012506724
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '新增内容为：

          {{#1744932102704.text#}}

          请输入‘保存’进入下一步操作'
        desc: ''
        selected: false
        title: 直接回复 13
        type: answer
        variables: []
      height: 134
      id: '1742518495834'
      position:
        x: 3649.39411690494
        y: 565.655871064894
      positionAbsolute:
        x: 3649.39411690494
        y: 565.655871064894
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: contains
            id: a9ee40c9-21fd-4e90-9b82-e88eea05576d
            value: 错误
            varType: string
            variable_selector:
            - '1742439055405'
            - result
          - comparison_operator: contains
            id: 349153b1-3a45-4b69-a717-5cdc14093b8c
            value: 失败
            varType: string
            variable_selector:
            - '1742439055405'
            - result
          id: 'true'
          logical_operator: or
        desc: ''
        selected: false
        title: 条件分支 8
        type: if-else
      height: 151
      id: '1742519150567'
      position:
        x: 2955.5585127815307
        y: 1252.999605636577
      positionAbsolute:
        x: 2955.5585127815307
        y: 1252.999605636577
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1744932857138.text#}}

          '
        desc: ''
        selected: false
        title: 直接回复 14
        type: answer
        variables: []
      height: 102
      id: '1742519180382'
      position:
        x: 3762.2704282050154
        y: 1387.0212401753213
      positionAbsolute:
        x: 3762.2704282050154
        y: 1387.0212401753213
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 当前不可以新增，请输入重置
        desc: ''
        selected: false
        title: 不可新增回复
        type: answer
        variables: []
      height: 99
      id: '1742519704548'
      position:
        x: 1250.444040403861
        y: 715.6772483643398
      positionAbsolute:
        x: 1250.444040403861
        y: 715.6772483643398
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "def main() -> dict:\n    return {\n        \"result\": \"删除路径\"\n \
          \   }"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 输出保存状态-删除路径
        type: code
        variables: []
      height: 53
      id: '1742520510969'
      position:
        x: 1470.333265909448
        y: 2206.7170416110343
      positionAbsolute:
        x: 1470.333265909448
        y: 2206.7170416110343
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1742520510969'
          - result
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 变量赋值 - 删除路径
        type: assigner
        version: '2'
      height: 87
      id: '1742520588468'
      position:
        x: 1776.0743670360407
        y: 2215.9066284510104
      positionAbsolute:
        x: 1776.0743670360407
        y: 2215.9066284510104
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '以下是要删除的内容，请仔细确认后回复是/否进行删除


          预删除数据：


          {{#1743161856302.text#}}

          '
        desc: ''
        selected: false
        title: 直接回复 删除确认
        type: answer
        variables: []
      height: 134
      id: '1742520636440'
      position:
        x: 3422.9910297792335
        y: 2215.9066284510104
      positionAbsolute:
        x: 3422.9910297792335
        y: 2215.9066284510104
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        classes:
        - id: '1'
          name: 是
        - id: '2'
          name: 否
        desc: ''
        instruction: '根据用户输入的内容：{{#sys.query#}}，按照下述规则进行分类：

          1、如果内容是’是‘，或者与之含义相同的表述，则分类为''是''

          2、其余情况一律分类为''否'''
        instructions: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gpt-4o-mini
          provider: langgenius/openai/openai
        query_variable_selector:
        - '1742268499271'
        - sys.query
        selected: false
        title: 判断是否删除
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 167
      id: '1742520713951'
      position:
        x: 1277.2413824957846
        y: 1478.0792023745355
      positionAbsolute:
        x: 1277.2413824957846
        y: 1478.0792023745355
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 变量赋值 16
        type: assigner
        version: '2'
      height: 87
      id: '1742520757162'
      position:
        x: 1611.283678285005
        y: 1657.1325763514253
      positionAbsolute:
        x: 1611.283678285005
        y: 1657.1325763514253
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 取消删除
        desc: ''
        selected: false
        title: 直接回复 18 取消删除
        type: answer
        variables: []
      height: 99
      id: '1742520768799'
      position:
        x: 1921.0424305365295
        y: 1657.1325763514253
      positionAbsolute:
        x: 1921.0424305365295
        y: 1657.1325763514253
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\n\ndef main(ids_array: list, biaojiegou_save:\
          \ str) -> dict:\n    try:\n        schema = json.loads(biaojiegou_save)\n\
          \    except json.JSONDecodeError:\n        return {\"result\": \"表结构解析失败\"\
          }\n\n    ids_dict = {}\n    for item in ids_array:\n        data = json.loads(item)\n\
          \        table_name = data[\"table_name\"]\n        ids = data[\"ids\"]\n\
          \        ids_dict[table_name] = ids\n\n    results = []\n    api_url = \"\
          http://192.168.0.32:5003/delete_record\"\n    table_order = [\"student\"\
          , \"emp_expr\", \"emp\", \"operate_log\", \"operate_log_aop\", \"clazz\"\
          , \"dept\"]\n\n    for table_name in sorted(ids_dict.keys(), key=lambda\
          \ x: table_order.index(x) if x in table_order else len(table_order)):\n\
          \        ids = ids_dict[table_name]\n        if not ids:\n            results.append(f\"\
          {table_name}: 无记录可删除\")\n            continue\n\n        try:\n        \
          \    # 获取表结构中的 fields\n            table_schema = schema.get(table_name,\
          \ {})\n            fields = table_schema.get(\"fields\", {})\n         \
          \   primary_key = next(field for field, info in fields.items() if info.get(\"\
          key\") == \"PRI\")\n        except (KeyError, StopIteration):\n        \
          \    results.append(f\"{table_name}: 主键解析失败\")\n            continue\n\n\
          \        for id_value in ids:\n            payload = {\n               \
          \ \"table_name\": table_name,\n                \"primary_key\": primary_key,\n\
          \                \"primary_value\": id_value\n            }\n          \
          \  data = json.dumps(payload).encode('utf-8')\n            req = urllib.request.Request(api_url,\
          \ data=data, headers={\"Content-Type\": \"application/json\"})\n       \
          \     try:\n                with urllib.request.urlopen(req) as response:\n\
          \                    result = json.loads(response.read().decode('utf-8'))\n\
          \                    results.append(f\"{table_name} {primary_key}={id_value}:\
          \ {result.get('message', '删除成功')}\")\n            except Exception as e:\n\
          \                results.append(f\"{table_name} {primary_key}={id_value}:\
          \ 删除失败: {str(e)}\")\n\n    return {\"result\": \"\\n\".join(results)}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 代码执行 - 删除数据
        type: code
        variables:
        - value_selector:
          - '1743158495836'
          - result
          variable: ids_array
        - value_selector:
          - conversation
          - biaojiegou_save
          variable: biaojiegou_save
      height: 53
      id: '1742520996237'
      position:
        x: 2418.228354753685
        y: 1545.4618252160901
      positionAbsolute:
        x: 2418.228354753685
        y: 1545.4618252160901
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1744933370451.text#}}

          请检查数据库确认是否删除成功'
        desc: ''
        selected: false
        title: 直接回复 19
        type: answer
        variables: []
      height: 118
      id: '1742521402440'
      position:
        x: 3570.4150252306968
        y: 1545.4618252160901
      positionAbsolute:
        x: 3570.4150252306968
        y: 1545.4618252160901
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: chatgpt-4o-latest
          provider: langgenius/openai/openai
        prompt_template:
        - id: 554ffb3e-eafb-45c4-969c-585c4a5042fc
          role: system
          text: 你是一个数据输入助手。根据用户提供的自然语言内容 和表结构 ，生成一个结构化的 JSON 字符串
        - id: 8518d26b-24f0-4e16-9fae-430ae8da3dca
          role: user
          text: "请遵循以下规则：\n- 输入内容: {{#sys.query#}}\n- 表名: {{#conversation.table_names#}}\n\
            - 表结构: {{#conversation.biaojiegou_save#}}\n- 数据示例: {{#conversation.data_sample#}}\n\
            \n1. **输入解析**:\n   - 支持键值对（如 \"字段名: 值\"）或自然语言（如“员工姓名是张三”）。\n   - 支持多表（如“新增员工\
            \ username=张三 并记录日志”）和多条记录（如“新增两条员工：username=张三；username=李四”）。\n   - 字段名需与表结构一致，支持英文/中文，值保留完整（如“草鱼2斤”不拆分）。\n\
            \   - **随机数/字符串**:\n     - 若要求随机值（如“1744开头的13位数”或“以29开头、21x结尾的10位字符串，x为字母或数字”），生成符合格式的字符串。\n\
            \     - 格式：前缀/后缀/中间段（如 \"29...21x\"）+随机部分（数字、字母或混合），补足指定长度。\n     - 示例：输入“以29开头、21x结尾的10位字符串”，生成如\
            \ \"291234521A\"（x为0-9或A-Z）。\n     - 若无法生成，使用占位符 <random_长度_[prefix_X_][suffix_Y_][digit/alpha/alphanum]>（如\
            \ <random_10_prefix_29_suffix_21x_alphanum>）。\n     - 支持任意格式（如“随机8位字母”或“前缀ABC的10位数”）。\n\
            \n2. **主键处理**:\n   - 识别表的主键（标记为 \"PRI\" 或 '(主键)'）。\n   - 未提供主键时，省略，交后端生成；若指定（如“id=50”），使用。\n\
            \n3. **外键关联**： - 若涉及多个表（如新增套餐并包含菜品），请判断主表（如 setmeal）与从表（如 setmeal_dish）的关系。\
            \ - 从表应使用主表生成的主键作为外键，格式为 <new_表名_id>（如 <new_setmeal_id>）。 - 若外键为名称字段（如“分类为甜品”），请生成\
            \ <表名_字段名_值> 格式的占位符（如 <category_name_甜品>），由系统后续解析。 - 若外键值明确（如“category_id=23”），直接使用。\n\
            \n4. **字段校验**:\n   - 字段需在表结构中，否则返回 {\"result\": \"{}\"}，提示“无效字段：{字段名}”。\n\
            \n5. **日期处理**:\n   - 支持多种格式，转换为 \"YYYY-MM-DD HH:MM:SS\" 或 now()（当前时间）。\n\
            \n6. **输出格式**:\n   - JSON：{\"result\": {\"表名\": [{\"字段\": \"值\"}, ...]}}，双引号，包裹在\
            \ <output>json。\n   - 多表分组，空/无效输入返回 {\"result\": \"{}\"}。\n\n示例：\n- 输入：“新增员工\
            \ username=张三, name=张三, dept_id=1 并记录操作日志 info=新增员工张三”\n  <output>\njson\n\
            \  {\"result\": {\"emp\": [{\"username\": \"张三\", \"name\": \"张三\", \"\
            dept_id\": \"1\"}], \"operate_log\": [{\"info\": \"新增员工张三\"}]}}\n  </output>\n\
            \n- 输入：“新增一个菜品，名称 芒果布丁，分类为甜品，价格 15.00”\n  <output>\njson\n  {\"result\"\
            : {\"dish\": [{\"name\": \"芒果布丁\", \"category_id\": \"<category_name_甜品>\"\
            , \"price\": \"15.00\"}]}}\n  </output>\n\n- 输入：“新增订单，订单号为1744开头的随机13位数，用户ID=4，金额=3049.00”\
            \ \n<output>\njson\n  {\"result\": {\"orders\": [{\"number\": \"1744123456789\"\
            , \"user_id\": \"4\", \"amount\": \"3049.00\"}]}}\n  </output>"
        selected: false
        title: LLM 8 - 新增内容编辑
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1742607431930'
      position:
        x: 1262.8935018970606
        y: 589.6819515689788
      positionAbsolute:
        x: 1262.8935018970606
        y: 589.6819515689788
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 请提供正确的数据格式或内容
        desc: ''
        selected: false
        title: 直接回复 20
        type: answer
        variables: []
      height: 99
      id: '1742608884060'
      position:
        x: 1277.2413824957846
        y: 1727.4624021854704
      positionAbsolute:
        x: 1277.2413824957846
        y: 1727.4624021854704
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1742268574820'
          - text
          variable_selector:
          - conversation
          - biaojiegou_save
          write_mode: over-write
        selected: false
        title: 变量赋值 3 表结构赋值
        type: assigner
        version: '2'
      height: 87
      id: '17426938619580'
      position:
        x: -637.2360856757366
        y: 527.1233189382341
      positionAbsolute:
        x: -637.2360856757366
        y: 527.1233189382341
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\nimport re\n\ndef main(table_names:\
          \ list, schema_str: str) -> dict:\n    api_url = \"http://192.168.0.32:5003/execute_query\"\
          \n    try:\n        print(f\"table_names: {table_names}\")\n        print(f\"\
          schema_str (raw): '{schema_str}'\")\n        if not schema_str or schema_str.strip()\
          \ == \"\":\n            raise Exception(\"Schema string is empty\")\n\n\
          \        # 预处理：清理并修复可能的 JSON 格式问题\n        cleaned_schema_str = schema_str.strip()\n\
          \        # 移除 Markdown 标记和多余空白\n        cleaned_schema_str = re.sub(r'```json\\\
          s*|\\s*```', '', cleaned_schema_str)\n        # 替换多余的换行符和空格\n        cleaned_schema_str\
          \ = re.sub(r'\\s*\\n\\s*', '', cleaned_schema_str)\n        # 修复表定义之间的分隔符问题\n\
          \        cleaned_schema_str = re.sub(r'}\\s*([^{,])', '}, \\\\1', cleaned_schema_str)\
          \  # 添加缺失的逗号\n        cleaned_schema_str = re.sub(r'}{', '}, {', cleaned_schema_str)\
          \  # 修复无逗号的拼接\n        # 确保整体是一个对象\n        if not cleaned_schema_str.startswith('{'):\n\
          \            cleaned_schema_str = '{' + cleaned_schema_str\n        if not\
          \ cleaned_schema_str.endswith('}'):\n            cleaned_schema_str = cleaned_schema_str\
          \ + '}'\n        # 移除末尾多余的逗号\n        cleaned_schema_str = re.sub(r',\\\
          s*}', '}', cleaned_schema_str)\n\n        print(f\"Cleaned schema_str: '{cleaned_schema_str}'\"\
          )\n        try:\n            schema = json.loads(cleaned_schema_str)\n \
          \           print(f\"Parsed schema: {schema}\")\n        except json.JSONDecodeError\
          \ as e:\n            print(f\"JSON decode error at position {e.pos}: {e.msg}\"\
          )\n            print(f\"Problematic snippet: '{cleaned_schema_str[max(0,\
          \ e.pos-10):e.pos+10]}'\")\n            # 尝试逐步截断修复\n            try:\n \
          \               last_valid_pos = cleaned_schema_str.rfind('}', 0, e.pos)\
          \ + 1\n                if last_valid_pos > 1:\n                    cleaned_schema_str\
          \ = cleaned_schema_str[:last_valid_pos]\n                    schema = json.loads(cleaned_schema_str)\n\
          \                    print(f\"Recovered partial schema: {schema}\")\n  \
          \              else:\n                    raise Exception(\"Unable to recover\
          \ valid JSON\")\n            except Exception:\n                schema =\
          \ {}  # 最终 fallback 到空对象\n                print(\"Fallback to empty schema\"\
          )\n\n        result_data = {}\n        for table in table_names:\n     \
          \       sql_query = f\"SELECT * FROM {table} LIMIT 1\"\n            print(f\"\
          SQL query for {table}: {sql_query}\")\n            payload = {\"sql_query\"\
          : sql_query}\n            data = json.dumps(payload).encode('utf-8')\n \
          \           req = urllib.request.Request(api_url, data=data, headers={\"\
          Content-Type\": \"application/json\"})\n            with urllib.request.urlopen(req)\
          \ as response:\n                table_data = json.loads(response.read().decode('utf-8'))\n\
          \                result_data[table] = table_data\n\n        result_str =\
          \ json.dumps(result_data, ensure_ascii=False)\n        return {'result':\
          \ result_str}\n    except Exception as e:\n        raise Exception(f\"Error:\
          \ {str(e)}\")"
        code_language: python3
        desc: 返回数据库的一条数据作为示例给LLM（暂时是硬编码）
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 数据示例
        type: code
        variables:
        - value_selector:
          - '1743382507830'
          - result
          variable: table_names
        - value_selector:
          - '1742268574820'
          - text
          variable: schema_str
      height: 97
      id: '1742695585674'
      position:
        x: -267.99524063399167
        y: 671.1233189382341
      positionAbsolute:
        x: -267.99524063399167
        y: 671.1233189382341
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1742268541036'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gpt-4o-mini
          provider: langgenius/openai/openai
        prompt_template:
        - id: e0a4fb31-f74d-4dcd-816c-c2d2da20e271
          role: system
          text: '根据以下从数据库获取的表结构 JSON 数据：{{#context#}}，提取所有表名，遵循以下规则：

            1. 从 JSON 数据中识别所有表名（JSON 对象的顶级键）。

            2. 输出纯文本表名列表，每行一个表名，不带任何符号（如引号、花括号、冒号等）。

            3. 不添加额外说明或标记（如 ```）。


            示例：

            - 输入：

            {"result": ["{\"tickets\": {\"fields\": {\"ticket_id\": {\"type\": \"varchar(20)\"}}},
            \"customers\": {\"fields\": {\"customer_id\": {\"type\": \"int\"}}}}"]}

            - 输出：

            tickets

            customers


            表结构数据：{{#context#}}'
        selected: false
        title: 获取表名
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1742697648839'
      position:
        x: -1007.4649189781278
        y: 671.1233189382341
      positionAbsolute:
        x: -1007.4649189781278
        y: 671.1233189382341
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1743382507830'
          - result
          variable_selector:
          - conversation
          - table_names
          write_mode: over-write
        selected: false
        title: 变量赋值 - 获取表名
        type: assigner
        version: '2'
      height: 87
      id: '1742873006355'
      position:
        x: -645.8552699732197
        y: 833.8192642709555
      positionAbsolute:
        x: -645.8552699732197
        y: 833.8192642709555
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1742695585674'
          - result
          variable_selector:
          - conversation
          - data_sample
          write_mode: over-write
        selected: false
        title: 变量赋值  - 数据示例
        type: assigner
        version: '2'
      height: 87
      id: '1742873522807'
      position:
        x: -267.99524063399167
        y: 527.1233189382341
      positionAbsolute:
        x: -267.99524063399167
        y: 527.1233189382341
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: chatgpt-4o-latest
          provider: langgenius/openai/openai
        prompt_template:
        - id: 79197b4f-e771-4da1-8426-0f9ef6c9926d
          role: system
          text: '根据以下返回的数据 {{#conversation.delete_show#}} ,并参考表结构 {{#conversation.biaojiegou_save#}}，以及表名{{#conversation.table_names#}}

            提取用户要删除的主键值列表，支持多表关联删除。注意:不要附加任何说明和文字,仅输出数据.'
        - id: 4015007f-1587-4d5b-9155-c14cda878e9f
          role: user
          text: "规则：\n1. 输入数据格式：[{\"table_name\": \"xxx\", \"id\": \"yyy\", ...},\
            \ ...]\n2. 按 table_name 分组：\n   - 严格根据每个记录的 \"table_name\" 字段分组，不参考其他字段（如\
            \ \"class_name\"）推测表名。\n   - 对于每个表，从表结构中识别主键字段（标记为 \"PRI\" 的字段），提取所有记录的该字段值。\n\
            3. 输出格式：{\"result\": {\"table_name\": [\"id1\", \"id2\"], ...}}\n   -\
            \ \"result\" 是固定根键。\n   - 每个 table_name 对应一个主键值列表，主键值使用双引号。\n   - 必须输出为单一\
            \ JSON 对象，不分拆为多行。\n4. 如果输入为空或无效，返回 {\"result\": {}}\n\n示例：\n- 输入：[{\"\
            table_name\": \"emp\", \"id\": \"54\", \"name\": \"赵六\"}, {\"table_name\"\
            : \"emp_expr\", \"id\": \"7\", \"emp_id\": \"54\"}]\n  输出：{\"result\"\
            : {\"emp\": [\"54\"], \"emp_expr\": [\"7\"]}}\n- 输入：[{\"table_name\":\
            \ \"operate_log\", \"id\": \"1\", \"class_name\": \"DeptController\"},\
            \ {\"table_name\": \"operate_log\", \"id\": \"39\", \"class_name\": \"\
            StudentController\"}]\n  输出：{\"result\": {\"operate_log\": [\"1\", \"\
            39\"]}}\n- 输入：[]\n  输出：{\"result\": {}}"
        selected: false
        title: LLM 9 - 批量删除解析
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1743158375055'
      position:
        x: 1637.8790695356734
        y: 1530.1423173053174
      positionAbsolute:
        x: 1637.8790695356734
        y: 1530.1423173053174
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef main(llm_output: str) -> dict:\n    try:\n     \
          \   # 如果是单一 JSON，直接解析\n        data = json.loads(llm_output)\n        result\
          \ = data.get(\"result\", {})\n    except json.JSONDecodeError:\n       \
          \ # 如果是多个 JSON，按行解析并合并\n        result = {}\n        for line in llm_output.splitlines():\n\
          \            if line.strip():\n                try:\n                  \
          \  data = json.loads(line)\n                    table_name = data[\"table_name\"\
          ]\n                    ids = data[\"ids\"]\n                    result[table_name]\
          \ = ids\n                except json.JSONDecodeError:\n                \
          \    continue\n\n    if not isinstance(result, dict):\n        return {\"\
          result\": []}\n    final_result = []\n    for table_name, ids in result.items():\n\
          \        if isinstance(ids, list) and ids:\n            final_result.append(json.dumps({\"\
          table_name\": table_name, \"ids\": ids}, ensure_ascii=False))\n    return\
          \ {\"result\": final_result}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 代码执行 15 - 字符串转数组（删除）
        type: code
        variables:
        - value_selector:
          - '1743158375055'
          - text
          variable: llm_output
      height: 53
      id: '1743158495836'
      position:
        x: 1928.9594780011666
        y: 1570.6855453055682
      positionAbsolute:
        x: 1928.9594780011666
        y: 1570.6855453055682
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1743158495836'
          - result
          variable_selector:
          - conversation
          - delete_array
          write_mode: over-write
        selected: false
        title: 变量赋值  - delete_array
        type: assigner
        version: '2'
      height: 87
      id: '1743159266448'
      position:
        x: 2418.228354753685
        y: 1640.2970496933738
      positionAbsolute:
        x: 2418.228354753685
        y: 1640.2970496933738
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: chatgpt-4o-latest
          provider: langgenius/openai/openai
        prompt_template:
        - id: 442afaf7-4dcb-4886-b99c-4746aa47af83
          role: system
          text: "你是一个数据库助手。根据用户输入和表结构，生成合法的 MySQL SELECT 语句，查询待删除的记录，仅用于预览或检查，不生成\
            \ DELETE 语句。\n\n用户输入：\n{{#sys.query#}} \n表结构：{{#conversation.biaojiegou_save#}}\
            \ \n表名：{{#conversation.table_names#}} \n数据示例：{{#conversation.data_sample#}}"
        - id: 425e2af8-d0c6-4e9a-83ab-7e690607a0f3
          role: user
          text: "规则：\n1. 动态识别目标表：\n   - 从输入中提取表相关词（如“员工”-> \"employee\"，“菜品”-> \"\
            dish\"，“分类”-> \"category\"）。\n   - 若表名模糊（如“菜品分类表”），结合表结构和条件推断：\n     -\
            \ 检查表名和字段是否匹配条件（如\"status\"在\"category\"或\"dish\"中的含义）。\n     - 优先级：输入关键词\
            \ > 表结构字段匹配 > 表名列表第一个表。\n2. 解析条件：\n   - 支持显式条件（如\"id=5\"）。\n   - 自然语言条件（如“状态为禁用”）根据表字段语义动态映射：\n\
            \     - 查找表中\"status\"字段，结合数据示例推断值（\"0\"可能是“禁用”或“停售”）。\n     - 若多个表有\"\
            status\"，选择与输入关键词最相关的表。\n   - 无条件时，返回提示。\n3. 生成SQL：\n   - 格式：SELECT '[表名]'\
            \ AS table_name, [主键] AS id, [字段1], [字段2], NULL AS extra1 FROM [表名] WHERE\
            \ [条件]。\n   - 主键从表结构提取（\"PRI\"标记）。\n   - 字段1、字段2从数据示例取前两个非主键字段，不足补NULL。\n\
            4. 关联表（可选）：\n   - 若输入提及关联（如“及其口味”），查询从表：\n     - SELECT '[从表]' AS table_name,\
            \ [从表主键] AS id, [字段1], [字段2], NULL AS extra1 FROM [从表] WHERE [外键] IN (主表查询)。\n\
            \     - 外键从表结构字段名推断。\n   - 用UNION ALL连接。\n5. 无效输入返回：\"请提供有效的删除条件，例如‘删除员工\
            \ id=5’\"。\n\n示例：\n- 输入：“删除员工 id=5”\n  输出：SELECT 'employee' AS table_name,\
            \ id, name, username, NULL AS extra1 FROM employee WHERE id = '5'\n- 输入：“删除菜品分类表中状态为禁用的记录”\n\
            \  输出：SELECT 'dish' AS table_name, id, name, description, NULL AS extra1\
            \ FROM dish WHERE status = '0'\n- 输入：“删除菜品 id=46 及其相关口味”\n  输出：SELECT\
            \ 'dish' AS table_name, id, name, description, NULL AS extra1 FROM dish\
            \ WHERE id = '46' UNION ALL SELECT 'dish_flavor' AS table_name, id, name,\
            \ value, NULL AS extra1 FROM dish_flavor WHERE dish_id = '46'"
        selected: false
        title: LLM 10 - 删除查询解析
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1743160805827'
      position:
        x: 2073.712146857373
        y: 2220.8395224715896
      positionAbsolute:
        x: 2073.712146857373
        y: 2220.8395224715896
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import re\n\ndef main(sql_string: str) -> dict:\n    sql_string = re.sub(r'```sql\\\
          s*', '', sql_string)\n    sql_string = re.sub(r'\\s*```', '', sql_string)\n\
          \    sql_string = sql_string.replace('\\n', ' ')\n    sql_string = ' '.join(sql_string.split())\n\
          \    return {\"result\": sql_string}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 整理删除查询语句
        type: code
        variables:
        - value_selector:
          - '1743160805827'
          - text
          variable: sql_string
      height: 53
      id: '1743160882788'
      position:
        x: 2385.686444354098
        y: 2215.9066284510104
      positionAbsolute:
        x: 2385.686444354098
        y: 2215.9066284510104
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\n\ndef main(sql_query: str) -> dict:\n\
          \    api_url = \"http://192.168.0.32:5003/execute_query\"\n    payload =\
          \ {\"sql_query\": sql_query}\n    data = json.dumps(payload).encode('utf-8')\n\
          \    req = urllib.request.Request(api_url, data=data, headers={\"Content-Type\"\
          : \"application/json\"})\n    \n    try:\n        print(f\"Executing SQL\
          \ query: {sql_query}\")  # 调试日志\n        with urllib.request.urlopen(req)\
          \ as response:\n            result_data = json.loads(response.read().decode('utf-8'))\n\
          \            result_str = json.dumps(result_data, ensure_ascii=False)\n\
          \            return {'result': result_str}\n    except Exception as e:\n\
          \        print(f\"Error executing query: {str(e)}\")  # 调试日志\n        return\
          \ {'result': '[]'}  # 返回空结果，避免中断工作流"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 执行删除查询
        type: code
        variables:
        - value_selector:
          - '1743160882788'
          - result
          variable: sql_query
      height: 53
      id: '1743160922421'
      position:
        x: 2682.8988985858496
        y: 2220.8395224715896
      positionAbsolute:
        x: 2682.8988985858496
        y: 2220.8395224715896
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1743160922421'
          - result
          variable_selector:
          - conversation
          - delete_show
          write_mode: over-write
        selected: false
        title: 变量赋值 22 - 预删除数据赋值
        type: assigner
        version: '2'
      height: 87
      id: '1743161554924'
      position:
        x: 3094.7091767217985
        y: 2343.988359702085
      positionAbsolute:
        x: 3094.7091767217985
        y: 2343.988359702085
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1743160922421'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gpt-4o-mini
          provider: langgenius/openai/openai
        prompt_template:
        - id: 28a11b00-14e5-4d32-9535-d0417521f207
          role: system
          text: "将以下 JSON 数据解析为易读的纯文本格式：\n{{#context#}}\n该 JSON 包含多表数据（每条记录有 \"table_name\"\
            \ 字段），请根据表结构 {{#conversation.biaojiegou_save#}} 进行区分并整理。\n\n规则：\n1. 按\
            \ table_name 分组展示，每组以 \"表名:\" 开头。\n2. 每条记录按字段逐行展示，字段名后接冒号和值（例如 \"部门: 技术支持部\"\
            ）。\n3. 字段顺序按输入数据中的顺序排列。\n4. 每条记录之间用 \"----\" 分隔，每组表之间用空行分隔。\n5. 如果数据为空，返回\
            \ \"无数据\"。\n6. 输出纯文本，不使用 Markdown 或代码块标记。\n\n示例：\n- 输入：\n  [\n    {\"\
            table_name\": \"emp\", \"id\": \"54\", \"username\": \"wangwu\", \"name\"\
            : \"王五\"},\n    {\"table_name\": \"emp\", \"id\": \"55\", \"username\"\
            : \"sunqi\", \"name\": \"孙七\"},\n    {\"table_name\": \"emp_expr\", \"\
            emp_id\": \"54\", \"company\": \"百度科技\"}\n  ]\n- 输出：\n  emp:\n  id: 54\n\
            \  username: wangwu\n  name: 王五\n  ----\n  id: 55\n  username: sunqi\n\
            \  name: 孙七\n\n  emp_expr:\n  emp_id: 54\n  company: 百度科技"
        selected: false
        title: LLM 11 - 整理预删除数据
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1743161856302'
      position:
        x: 3079.608813704079
        y: 2215.9066284510104
      positionAbsolute:
        x: 3079.608813704079
        y: 2215.9066284510104
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nimport re\n\ndef main(llm_output: str) -> dict:\n    output_pattern\
          \ = re.compile(r'<output>(.*?)</output>', re.DOTALL)\n    output_match =\
          \ output_pattern.search(llm_output)\n    \n    if output_match:\n      \
          \  content = output_match.group(1).strip()\n\n        # \U0001F447 新增：清除\
          \ markdown 中的语言声明，如 json\\n\n        content = re.sub(r'^(json\\s*)', '',\
          \ content, flags=re.IGNORECASE)\n        # \U0001F447 保留原处理逻辑：去掉三引号 ```json\
          \ 或 ```\n        content = re.sub(r'```json\\s*|```', '', content, flags=re.IGNORECASE)\n\
          \n        try:\n            json_data = json.loads(content)\n          \
          \  result_dict = json_data[\"result\"]\n            final_result = []\n\n\
          \            for table_name, records in result_dict.items():\n         \
          \       for record in (records if isinstance(records, list) else [records]):\n\
          \                    final_result.append(json.dumps({\"table_name\": table_name,\
          \ \"fields\": record}, ensure_ascii=False))\n\n            return {\"result\"\
          : final_result}\n        except Exception as e:\n            print(f\"Error\
          \ parsing JSON: {str(e)} - Content: {content}\")\n            return {\"\
          result\": []}\n    \n    print(\"No <output> match found\")\n    return\
          \ {\"result\": []}\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 代码执行 18- 新增内容转换为字符串
        type: code
        variables:
        - value_selector:
          - '1742607431930'
          - text
          variable: llm_output
      height: 53
      id: '1743211489780'
      position:
        x: 1648.5349208915072
        y: 573.234453897446
      positionAbsolute:
        x: 1648.5349208915072
        y: 573.234453897446
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "def main(table_names_str: str) -> dict:\n    # 将换行符分隔的字符串拆分为数组，去除空行和多余空格\n\
          \    table_names = [name.strip() for name in table_names_str.split('\\n')\
          \ if name.strip()]\n    return {\"result\": table_names}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 转换数组
        type: code
        variables:
        - value_selector:
          - '1742697648839'
          - text
          variable: table_names_str
      height: 53
      id: '1743382507830'
      position:
        x: -637.2360856757366
        y: 706.3664139704869
      positionAbsolute:
        x: -637.2360856757366
        y: 706.3664139704869
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: not empty
            id: 4dddf4e3-6f03-4e2e-9237-472f2105f08b
            value: ''
            varType: string
            variable_selector:
            - conversation
            - biaojiegou_save
          - comparison_operator: not empty
            id: b53a77ff-cc6c-4857-9749-908849cec4f9
            value: ''
            varType: array[string]
            variable_selector:
            - conversation
            - table_names
          - comparison_operator: not empty
            id: 5cf730da-6054-4354-ac8b-b67f56124be3
            value: ''
            varType: string
            variable_selector:
            - conversation
            - data_sample
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: 条件分支 - 事前作业确认
        type: if-else
      height: 177
      id: '1743973729940'
      position:
        x: -1362.5362998966607
        y: 341.55607869345965
      positionAbsolute:
        x: -1362.5362998966607
        y: 341.55607869345965
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nimport re\n\ndef main(record_strings: list) -> dict:\n\
          \    if not isinstance(record_strings, list):\n        print(\"Error: record_strings\
          \ must be a list\")\n        return {\"result\": \"{}\"}\n\n    placeholders\
          \ = set()\n    placeholder_pattern = re.compile(r'<[^>]+>')\n\n    for record_str\
          \ in record_strings:\n        try:\n            record = json.loads(record_str)\n\
          \            fields = record.get(\"fields\", {})\n            for field,\
          \ value in fields.items():\n                if isinstance(value, str):\n\
          \                    matches = placeholder_pattern.findall(value)\n    \
          \                for match in matches:\n                        placeholder_name\
          \ = match[1:-1]\n                        placeholders.add(placeholder_name)\n\
          \        except json.JSONDecodeError as e:\n            print(f\"Error parsing\
          \ record string: {record_str}, error: {str(e)}\")\n            continue\n\
          \n    placeholders_list = list(placeholders)\n\n    # \U0001F447 封装两个值为一个\
          \ JSON 字符串\n    return {\n        \"result\": json.dumps({\n           \
          \ \"placeholders\": placeholders_list,\n            \"record_strings\":\
          \ record_strings\n        }, ensure_ascii=False)\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 代码执行 21 -提取占位符
        type: code
        variables:
        - value_selector:
          - '1743211489780'
          - result
          variable: record_strings
      height: 53
      id: '1744237287609'
      position:
        x: 2013.7303079302828
        y: 542.9201225672381
      positionAbsolute:
        x: 2013.7303079302828
        y: 542.9201225672381
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nimport re\nimport random\nimport string\n\ndef main(code_22_output:\
          \ str) -> dict:\n    try:\n        parsed = json.loads(code_22_output)\n\
          \        record_strings = parsed.get(\"record_strings\", [])\n        placeholders_dict\
          \ = parsed.get(\"placeholders\", {})\n    except json.JSONDecodeError as\
          \ e:\n        print(f\"Error parsing input: {str(e)}\")\n        return\
          \ {\"result\": []}\n\n    if not isinstance(record_strings, list):\n   \
          \     raise ValueError(\"Invalid record_strings format\")\n\n    # 动态字段映射：占位符前缀\
          \ → 目标字段（仅关联表使用）\n    field_mappings = {\n        \"dish_name_\": \"name\"\
          \n        # 可扩展，如 \"order_name_\": \"name\"\n    }\n\n    # 关联表标识\n    relation_tables\
          \ = {\"setmeal_dish\", \"order_detail\", \"dish_flavor\"}\n\n    placeholder_pattern\
          \ = re.compile(r'<[^>]+>')\n    updated_records = []\n\n    for record_str\
          \ in record_strings:\n        record = json.loads(record_str)\n        table_name\
          \ = record.get(\"table_name\")\n        fields = record.get(\"fields\",\
          \ {})\n        updated_fields = fields.copy()\n\n        for field, value\
          \ in fields.items():\n            if isinstance(value, str):\n         \
          \       matches = placeholder_pattern.findall(value)\n                for\
          \ match in matches:\n                    placeholder_name = match[1:-1]\n\
          \n                    # 跳过主键占位符\n                    if placeholder_name.startswith(\"\
          new_\"):\n                        continue\n\n                    # 处理随机数/字符串占位符\n\
          \                    if placeholder_name.startswith(\"random_\"):\n    \
          \                    parts = placeholder_name.split(\"_\")\n           \
          \             if len(parts) < 2 or not parts[1].isdigit():\n           \
          \                 raise ValueError(f\"无效随机占位符格式：{match}\")\n\n         \
          \               total_length = int(parts[1])\n                        affix_parts\
          \ = parts[2:]\n                        affix_type = None\n             \
          \           affixes = []\n                        char_type = \"digit\"\
          \  # 默认数字\n\n                        # 解析前缀、后缀、中间段和字符类型\n              \
          \          i = 0\n                        while i < len(affix_parts):\n\
          \                            if affix_parts[i] in (\"prefix\", \"suffix\"\
          , \"mid\"):\n                                affix_type = affix_parts[i]\n\
          \                                i += 1\n                              \
          \  if i < len(affix_parts):\n                                    affixes.append((affix_type,\
          \ affix_parts[i]))\n                                    i += 1\n       \
          \                     elif affix_parts[i] in (\"digit\", \"alpha\", \"alphanum\"\
          ):\n                                char_type = affix_parts[i]\n       \
          \                         i += 1\n                            else:\n  \
          \                              raise ValueError(f\"无效随机占位符段：{affix_parts[i]}\"\
          )\n\n                        # 计算固定部分长度\n                        fixed_length\
          \ = sum(len(affix[1]) for affix in affixes)\n                        if\
          \ fixed_length >= total_length:\n                            raise ValueError(f\"\
          固定部分长度 {fixed_length} 超过总长度 {total_length}\")\n\n                      \
          \  # 生成随机部分\n                        random_length = total_length - fixed_length\n\
          \                        if char_type == \"digit\":\n                  \
          \          chars = string.digits\n                        elif char_type\
          \ == \"alpha\":\n                            chars = string.ascii_uppercase\n\
          \                        else:  # alphanum\n                           \
          \ chars = string.digits + string.ascii_uppercase\n                     \
          \   random_part = ''.join(random.choice(chars) for _ in range(random_length))\n\
          \n                        # 拼接结果\n                        result = \"\"\n\
          \                        mid_pos = 0\n                        for affix_type,\
          \ affix in sorted(affixes, key=lambda x: x[0]):  # 按 prefix, mid, suffix\
          \ 排序\n                            if affix_type == \"prefix\":\n       \
          \                         result = affix + random_part + result\n      \
          \                      elif affix_type == \"suffix\":\n                \
          \                result += affix\n                            elif affix_type\
          \ == \"mid\":\n                                result += random_part[:mid_pos]\
          \ + affix + random_part[mid_pos:]\n                                mid_pos\
          \ += len(affix)\n                        if not affixes:  # 无固定部分，全随机\n\
          \                            result = random_part\n\n                  \
          \      updated_fields[field] = result\n                        continue\n\
          \n                    # 普通占位符处理\n                    if placeholder_name\
          \ not in placeholders_dict or placeholders_dict[placeholder_name][\"value\"\
          ] is None:\n                        parts = placeholder_name.split(\"_\"\
          , 2)\n                        friendly_value = parts[2] if len(parts) ==\
          \ 3 else placeholder_name\n                        raise ValueError(f\"\
          无法解析占位符：{match}（可能是分类‘{friendly_value}’不存在），请先添加该项\")\n\n              \
          \      updated_fields[field] = placeholders_dict[placeholder_name][\"value\"\
          ]\n\n                    # 动态添加冗余字段（仅关联表）\n                    if table_name\
          \ in relation_tables:\n                        for prefix, target_field\
          \ in field_mappings.items():\n                            if placeholder_name.startswith(prefix):\n\
          \                                field_value = placeholder_name[len(prefix):]\n\
          \                                updated_fields[target_field] = field_value\n\
          \n        updated_record = {\"table_name\": table_name, \"fields\": updated_fields}\n\
          \        updated_records.append(json.dumps(updated_record, ensure_ascii=False))\n\
          \n    return {\"result\": updated_records}"
        code_language: python3
        desc: ''
        error_strategy: fail-branch
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 代码执行 23 - 替换占位符
        type: code
        variables:
        - value_selector:
          - '1744313625195'
          - result
          variable: code_22_output
      height: 89
      id: '1744237356717'
      position:
        x: 2694.541219299537
        y: 517.1529409365612
      positionAbsolute:
        x: 2694.541219299537
        y: 517.1529409365612
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\nimport urllib.request\n\ndef main(code_21_output: str)\
          \ -> dict:\n    try:\n        parsed = json.loads(code_21_output)\n    \
          \    placeholders = parsed.get(\"placeholders\", [])\n        record_strings\
          \ = parsed.get(\"record_strings\", [])\n    except json.JSONDecodeError\
          \ as e:\n        print(f\"Error parsing code_21_output: {str(e)}\")\n  \
          \      return {\"result\": \"{}\"}\n\n    if not isinstance(placeholders,\
          \ list):\n        print(\"Error: placeholders must be a list\")\n      \
          \  return {\"result\": \"{}\"}\n\n    placeholders_dict = {}\n    api_url\
          \ = \"http://192.168.0.32:5003/execute_query\"\n\n    for placeholder in\
          \ placeholders:\n        parts = placeholder.split('_', 2)\n        if len(parts)\
          \ != 3:\n            print(f\"Invalid placeholder format: {placeholder}\"\
          )\n            continue\n        table, field, value = parts[0], parts[1],\
          \ parts[2]\n        sql_query = f\"SELECT id FROM {table} WHERE {field}\
          \ = '{value}' LIMIT 1\"\n        payload = {\"sql_query\": sql_query}\n\
          \        data = json.dumps(payload).encode('utf-8')\n        req = urllib.request.Request(api_url,\
          \ data=data, headers={\"Content-Type\": \"application/json\"})\n\n     \
          \   try:\n            with urllib.request.urlopen(req) as response:\n  \
          \              result = json.loads(response.read().decode('utf-8'))\n  \
          \              if result and isinstance(result, list) and len(result) >\
          \ 0:\n                    placeholders_dict[placeholder] = {\"value\": str(result[0][\"\
          id\"])}\n                else:\n                    placeholders_dict[placeholder]\
          \ = {\"value\": None}\n        except Exception as e:\n            print(f\"\
          Error querying {placeholder}: {str(e)}\")\n            placeholders_dict[placeholder]\
          \ = {\"value\": None}\n\n    return {\n        \"result\": json.dumps({\n\
          \            \"placeholders\": placeholders_dict,\n            \"record_strings\"\
          : record_strings\n        }, ensure_ascii=False)\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 代码执行 22 - 查询占位符
        type: code
        variables:
        - value_selector:
          - '1744237287609'
          - result
          variable: code_21_output
      height: 53
      id: '1744313625195'
      position:
        x: 2341.6654739215505
        y: 542.9201225672381
      positionAbsolute:
        x: 2341.6654739215505
        y: 542.9201225672381
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1744237356717.error_message#}}

          请确认异常'
        desc: ''
        selected: false
        title: 直接回复 22
        type: answer
        variables: []
      height: 118
      id: '1744315485394'
      position:
        x: 3191.759593987859
        y: 746.234453897446
      positionAbsolute:
        x: 3191.759593987859
        y: 746.234453897446
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_modify
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - delete_show
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - lastest_content_production
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_new
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 重置检索结果 (2)
        type: assigner
        version: '2'
      height: 199
      id: '17444989103210'
      position:
        x: 2469.3772310741674
        y: 1252.999605636577
      positionAbsolute:
        x: 2469.3772310741674
        y: 1252.999605636577
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_modify
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - delete_show
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - lastest_content_production
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_new
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 重置检索结果 (1)
        type: assigner
        version: '2'
      height: 199
      id: '17444989330050'
      position:
        x: 2370.158842309376
        y: 914.0107667033103
      positionAbsolute:
        x: 2370.158842309376
        y: 914.0107667033103
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_modify
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - delete_show
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - lastest_content_production
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_new
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 重置检索结果 (3)
        type: assigner
        version: '2'
      height: 199
      id: '17444989424110'
      position:
        x: 2740.8724899236745
        y: 1545.4618252160901
      positionAbsolute:
        x: 2740.8724899236745
        y: 1545.4618252160901
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1742354001584'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        prompt_template:
        - id: ed876210-a0a6-4047-b0a2-9f005273c93d
          role: system
          text: 根据{{#context#}}的结果，和用户提问{{#sys.query#}}输出自然语言相关结果信息。
        - id: 0f410660-15d6-4b57-bd90-9e1da85d8880
          role: user
          text: '这个就是返回相关id修改成功的信息，之后提示用户请在数据库确认结果

            不需要修饰语言比如：好的，根据您提供的例子，我来回答您的问题：

            也不需要专业语言


            如果输出错误信息，则解析后输出

            '
        selected: false
        title: LLM 15 - 结果返回
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1744661636396'
      position:
        x: 2708.246009271044
        y: 930.6836489349246
      positionAbsolute:
        x: 2708.246009271044
        y: 930.6836489349246
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1744237356717'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        prompt_template:
        - id: 50c06f26-adff-459f-99ac-7126e3594705
          role: system
          text: "你是一个数据库助手，负责将待修改的JSON数据整理为用户友好的纯文本提示，基于用户提问和表结构，清晰描述新增内容，引导用户确认操作。\n\
            \n用户输入：{{#sys.query#}} \n表结构：{{#conversation.biaojiegou_save#}} \n表名：{{#conversation.table_names#}}\
            \ \n待新增数据：{{#context#}}"
        - id: 874c4271-5c1c-4a17-b1a0-19ab9213bcb2
          role: user
          text: "**规则**:\n1. **内容解析**:\n   - 从待新增数据解析表名和字段，结合表结构识别字段含义。\n   - 优先展示关键字段（如\
            \ name, number, price, user_id），省略次要字段（如 null 或默认值，如 cancel_reason）。\n\
            \   - 若字段为外键（如 category_id），显示关联表的值（如 category.name）或占位符（如 <category_name_甜品>\
            \ 转为“甜品分类”）。\n   - 处理占位符（如 <new_dish_id> 转为“待生成的主键”，<random_10_prefix_29_suffix_21x_alphanum>\
            \ 转为“随机10位字符串”）。\n\n2. **格式处理**:\n   - 日期：将 \"YYYY-MM-DD HH:MM:SS\" 或\
            \ \"now()\" 转为“YYYY年MM月DD日 HH:MM”（如 \"2025-04-14 20:17:21\" → \"2025年4月14日\
            \ 20:17”）。\n   - 状态值：转为友好文本（如 orders.status=1 → “待付款”，dish.status=1 →\
            \ “起售”）。\n   - 金额：添加单位“元”（如 amount=\"3049.00\" → “3049.00元”）。\n   - 空值（null）：省略，除非为关键字段（如\
            \ remark=null 忽略，name=null 显示“未指定”）。\n\n3. **展示逻辑**:\n   - **单表**：列出表名和关键字段（如“新增订单，订单号：1237WSB1L42ix，金额：3049.00元”）。\n\
            \   - **多表**：按表分组，分段展示（如“新增订单：...；新增订单明细：...”）。\n   - **多记录**：用编号或分行展示（如“订单明细1：...；订单明细2：...”）。\n\
            \   - 使用自然语言，字段名转为中文描述（如 number → “订单号”，name → “名称”），参考表结构注释（如 orders\
            \ COMMENT '订单表'）。\n\n4. **用户引导**:\n   - 明确操作：如“以下为待新增的内容，请确认是否保存”。\n \
            \  - 若有占位符，说明含义（如“订单号将生成随机10位字符串”）。\n   - 若输入无效，返回“无法解析新增内容，请检查输入”。\n\n\
            5. **输出格式**:\n   - 纯文本，无 JSON 或 Markdown。\n   - 每表分段，字段用“：”分隔，记录用编号或换行。\n\
            \   - 结尾引导确认，如“请确认是否保存”。\n\n6.  **注意**:\n如果待新增数据输入为空，请直接提示用户检查提示词\n\n\
            **示例**:\n- 输入数据：[{\"table_name\": \"orders\", \"fields\": {\"number\"\
            : \"1237WSB1L42ix\", \"user_id\": \"4\", \"amount\": \"3049.00\", \"order_time\"\
            : \"2025-04-14 20:17:21\", \"status\": 1}}, {\"table_name\": \"order_detail\"\
            , \"fields\": {\"order_id\": \"<new_orders_id>\", \"dish_id\": \"58\"\
            , \"number\": 1}}]\n- 输出：\n  新增订单：\n  订单号：1237WSB1L42ix\n  用户ID：4\n  金额：3049.00元\n\
            \  下单时间：2025年4月14日 20:17\n  状态：待付款\n\n  新增订单明细：\n  订单ID：待生成的主键\n  菜品ID：58\n\
            \  数量：1\n\n  请确认是否保存。"
        selected: false
        title: LLM 16 - 新增内容整理
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1744932102704'
      position:
        x: 3228.1367915841083
        y: 565.655871064894
      positionAbsolute:
        x: 3228.1367915841083
        y: 565.655871064894
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1742439055405'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        prompt_template:
        - id: 1271ae70-0151-4f6b-802e-6d580aecb0d6
          role: system
          text: '根据{{#context#}}的信息。

            表名：{{#conversation.table_names#}}

            表结构：{{#conversation.biaojiegou_save#}}


            判断是否保存成功

            在输出·原信息的基础上在输出整理后的用户友好自然语言'
        - id: 59b49912-a84b-4d62-bff0-af8038212842
          role: user
          text: '例如：

            Record inserted into setmeal: id=60

            Record inserted into setmeal_dish: id=101

            Record inserted into setmeal_dish: id=102


            在输出原文的基础上，根据表名表结构整理出来哪个部分新增成功。


            之后不需要【整理后的用户友好自然语言：】或者解释说明，直接输出原信息和整理内容即可'
        selected: false
        title: LLM 18
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1744932857138'
      position:
        x: 3402.5423836747445
        y: 1380.0568356689525
      positionAbsolute:
        x: 3402.5423836747445
        y: 1380.0568356689525
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1742520996237'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        prompt_template:
        - id: 52a6d1f8-96f1-405a-9685-34f3cd872157
          role: system
          text: '根据{{#context#}}的信息。

            表名：{{#conversation.table_names#}}

            表结构：{{#conversation.biaojiegou_save#}}


            判断是否删除成功

            在输出·原信息的基础上在输出整理后的用户友好自然语言

            不需要过度的分析'
        - role: user
          text: '请输出一遍原信息：{{#1742520996237.result#}}

            在输出整理后的语言。

            类似

            setmeal 表中 ID 为 60 的记录已成功删除。

            setmeal_dish 表中 ID 为 101 和 102 的记录已成功删除。'
        selected: false
        title: LLM 18 - 删除提示整理
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1744933370451'
      position:
        x: 3178.9248815405426
        y: 1545.4618252160901
      positionAbsolute:
        x: 3178.9248815405426
        y: 1545.4618252160901
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: 287.79729791321404
      y: 284.2600040900477
      zoom: 0.25
