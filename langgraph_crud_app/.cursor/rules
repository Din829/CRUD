开发规则 (Development Rules)

本文档旨在为 langgraph_crud_app 项目的开发提供一套指导原则，以确保代码的一致性、可维护性和灵活性。之后代码内的注释说明请用中文。

核心原则

1. 遵循架构:
    - 所有代码开发必须严格遵循 PROJECT_STRUCTURE.md 文件中定义的模块化架构。
    - 在添加新功能或修改现有代码时，务必将代码放置在正确的模块目录下。
    - services/ 目录: 用于存放可重用的、与 LangGraph 图结构解耦的业务逻辑、API 客户端、LLM 交互和数据处理工具。
    - nodes/ 目录: 仅包含 LangGraph 节点函数。主要负责调用 services/ 中的逻辑和流程控制。
        - routers.py: 存放负责条件判断和流程路由的节点。
        - actions.py: 存放执行具体业务动作的节点。
    - graph/ 目录: 包含 LangGraph 的状态定义 (state.py) 和图的构建逻辑 (graph_builder.py)。
    - config/ 目录: 用于存放配置信息。

2. 架构同步:
    - 重要: 如果开发过程中需要对项目架构进行调整，必须首先更新 PROJECT_STRUCTURE.md 文件以反映变更。
    - 保持 PROJECT_STRUCTURE.md 文件始终与实际架构一致。

3. 模块化与可重用性:
    - 将通用业务逻辑、数据处理或外部交互代码封装在 services/ 目录下，以便于节点调用。
    - 避免在 nodes/ 文件中直接编写复杂逻辑。

4. 灵活性:
    - 设计时考虑未来扩展性，参数尽量配置化（如 API 端点、模型名称）。
    - 遵循单一职责原则，每个模块和函数只做一件事。

5. 代码风格与注释:
    - 遵循 PEP 8 编码风格。
    - 所有重要函数、类和模块需添加中文文档字符串 (Docstrings) 和必要的中文注释。
    - 使用 Type Hinting 增强代码可读性与健壮性。

6. 依赖管理:
    - 所有依赖包必须写入 requirements.txt，建议固定版本号。

7. 文档更新:
    - 添加或修改重要功能时，应及时更新 README.md。

常见问题/注意事项 (Common Issues / Notes)

Prompt 模板编写规范

核心规则：
- 在编写 LangChain Prompt 模板时，必须区分真实变量和示例文本中的大括号。

用途：真实需要替换的变量
写法示例：{user_query} {schema_str}
说明：使用单大括号，LangChain 会在运行时替换

用途：示例或固定格式文本
写法示例：{{"field": "value"}} {{"id": 123}}
说明：使用双大括号，防止被误解析成变量

常见场景示例：
- JSON 示例: [{{"table": "users", "fields": {{"name": "张三"}}}}]
- 字段映射示例: {{"原字段": "新字段"}}
- 配置示例: {{"config": {{"key": "value"}}}}

错误示范：
错误：
示例: {"name": "value"}  # LangChain 会误认为需要传入 name 变量

正确：
示例: {{"name": "value"}}  # LangChain 识别为普通文本

快速检查 Checklist：
- 确认所有需要替换的变量使用单大括号。
- 确认所有示例和格式说明中的大括号使用双大括号。
- 特别检查 Prompt 中嵌套的 JSON 示例是否正确转义。

提示：
- 当前时间等系统函数如 now()，无需括号处理。
- 遇到复杂 JSON 嵌套时，推荐在 Python 端预处理转义后再传入 Prompt。

通过遵循这些规则，我们可以确保项目在迭代过程中保持结构清晰、易于理解和维护。
