# 开发规则 (Development Rules)

本文档旨在为 `langgraph_crud_app` 项目的开发提供一套指导原则，以确保代码的一致性、可维护性和灵活性。之后代码内的注释说明请用中文

## 核心原则

1.  **遵循架构:**
    *   所有代码开发必须严格遵循 `PROJECT_STRUCTURE.md` 文件中定义的模块化架构。
    *   在添加新功能或修改现有代码时，务必将代码放置在正确的模块目录下。
    *   **`services/` 目录:** 用于存放可重用的、与 LangGraph 图结构解耦的业务逻辑、API 客户端、LLM 交互和数据处理工具。
    *   **`nodes/` 目录:** 仅包含 LangGraph 节点函数。这些函数应保持简洁，主要负责调用 `services/` 中的逻辑和流程控制。
        *   `routers.py`: 存放负责条件判断和流程路由的节点。
        *   `actions.py`: 存放执行具体业务动作的节点。
    *   **`graph/` 目录:** 包含 LangGraph 的状态定义 (`state.py`) 和图的构建逻辑 (`graph_builder.py`)。
    *   **`config/` 目录:** 用于存放配置信息。

2.  **架构同步:**
    *   **重要:** 如果开发过程中需要对项目架构进行任何调整（例如，新增模块、修改目录结构、合并/拆分文件），**必须**首先更新 `PROJECT_STRUCTURE.md` 文件以反映这些变更。
    *   保持 `PROJECT_STRUCTURE.md` 文件始终是项目当前架构的真实写照。

3.  **模块化与可重用性:**
    *   优先将通用的业务逻辑、数据处理或外部交互代码封装在 `services/` 目录下的相应模块中，以便于节点函数调用。
    *   避免在 `nodes/` 文件中直接编写复杂的、可在别处重用的实现细节。

4.  **灵活性:**
    *   在设计服务和节点时，考虑未来的扩展性。尽量使用配置（`config/settings.py`）来管理可变参数（如 API 端点、模型名称）。
    *   遵循单一职责原则，让每个模块和函数只做一件事情。

5.  **代码风格与注释:**
    *   遵循 PEP 8 代码风格指南。
    *   为重要的函数、类和模块添加清晰的文档字符串 (Docstrings) 和必要的注释，解释其目的和用法。
    *   使用 Type Hinting 提高代码的可读性和健壮性。

6.  **依赖管理:**
    *   所有项目依赖（Python 包）必须添加到 `requirements.txt` 文件中，并建议指定版本号以确保环境一致性。

7.  **文档更新:**
    *   对于重要的功能添加或修改，应相应更新 `README.md` 文件，说明用法或变更。


通过遵循这些规则，我们可以确保项目在迭代过程中保持结构清晰、易于理解和维护。 