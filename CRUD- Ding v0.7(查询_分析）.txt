app:
  description: 'author: Ding

    实现表格灵活对应'
  icon: smiling_face_with_3_hearts
  icon_background: '#FFEAD5'
  mode: advanced-chat
  name: CRUD- Ding v0.7(查询/分析）
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/openai:0.0.11@390c87cc0f17370a70d3b214cd71a8de81fe9d6b52e6a38287acde034138b672
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/x:0.0.3@43a3a724a2945f55393b78a3d1868c81ce9394093a8a4d7adee1c3da19f2887c
kind: app
version: 0.1.5
workflow:
  conversation_variables:
  - description: ''
    id: 2bfa5b03-6942-4d36-9c2c-d29cbeb24a30
    name: delete_show
    selector:
    - conversation
    - delete_show
    value: ''
    value_type: string
  - description: ''
    id: 35f52bb5-6615-4226-852f-649df6d01abd
    name: delete_array
    selector:
    - conversation
    - delete_array
    value: []
    value_type: array[string]
  - description: ''
    id: edfda5cf-0fe2-4f0a-bebe-5052fa3fd0f4
    name: data_sample
    selector:
    - conversation
    - data_sample
    value: ''
    value_type: string
  - description: ''
    id: 41d10c54-90b2-4078-8ff2-78dd7168efff
    name: table_names
    selector:
    - conversation
    - table_names
    value: []
    value_type: array[string]
  - description: ''
    id: b5239e75-c361-445e-abf9-f066d8064268
    name: content_delete
    selector:
    - conversation
    - content_delete
    value: ''
    value_type: string
  - description: ''
    id: 690072b3-b837-4a48-8131-a49c08e013ae
    name: content_new
    selector:
    - conversation
    - content_new
    value: ''
    value_type: string
  - description: 记录1-多条最新数据状态
    id: 06c26f26-f5bc-4cd8-883b-cf5c793cba1e
    name: lastest_content_production
    selector:
    - conversation
    - lastest_content_production
    value: []
    value_type: array[string]
  - description: ''
    id: edf253f4-b6bf-4363-aa3f-e7bef9a35131
    name: biaojiegou_save
    selector:
    - conversation
    - biaojiegou_save
    value: ''
    value_type: string
  - description: ''
    id: d2ce6b95-4d6e-4ec2-92ed-0afb528d21dd
    name: save_content
    selector:
    - conversation
    - save_content
    value: ''
    value_type: string
  - description: ''
    id: c51302bc-24d6-4c23-bd37-3c2f781a579e
    name: id_check
    selector:
    - conversation
    - id_check
    value: ''
    value_type: string
  - description: ''
    id: 4e987a00-c041-4f7d-8662-1d5668cefbc9
    name: content_modify
    selector:
    - conversation
    - content_modify
    value: ''
    value_type: string
  environment_variables:
  - description: ''
    id: 1996b6f3-a38e-4041-8d7a-85328176ff94
    name: DB_NAME
    selector:
    - env
    - DB_NAME
    value: sky_take_out
    value_type: string
  - description: ''
    id: e593f790-fd60-43da-9105-909b3e1fc902
    name: DB_PASSWORD
    selector:
    - env
    - DB_PASSWORD
    value: q75946123
    value_type: string
  - description: ''
    id: 5314fe76-2d1f-4474-8748-f5926332e7b4
    name: DB_USER
    selector:
    - env
    - DB_USER
    value: root
    value_type: string
  - description: ''
    id: 1070336a-d614-4f95-b4d9-3fcb94190b01
    name: DB_PORT
    selector:
    - env
    - DB_PORT
    value: '3306'
    value_type: string
  - description: ''
    id: 64e0cc87-040d-4067-9124-a574b08884a9
    name: DB_HOST
    selector:
    - env
    - DB_HOST
    value: 192.168.0.32
    value_type: string
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: ''
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions: []
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: 1742268678777-source-1742268810496-target
      selected: false
      source: '1742268678777'
      sourceHandle: source
      target: '1742268810496'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 1742268810496-source-1742268852484-target
      selected: false
      source: '1742268810496'
      sourceHandle: source
      target: '1742268852484'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: if-else
      id: 1742268852484-source-1742269174054-target
      selected: false
      source: '1742268852484'
      sourceHandle: source
      target: '1742269174054'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: answer
      id: 1742269174054-true-1742269194306-target
      selected: false
      source: '1742269174054'
      sourceHandle: 'true'
      target: '1742269194306'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: answer
      id: 1742268852484-fail-branch-1742433373758-target
      selected: false
      source: '1742268852484'
      sourceHandle: fail-branch
      target: '1742433373758'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: parameter-extractor
      id: 1742269174054-false-1742434383045-target
      selected: false
      source: '1742269174054'
      sourceHandle: 'false'
      target: '1742434383045'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: parameter-extractor
        targetType: template-transform
      id: 1742434383045-source-1742434318366-target
      selected: false
      source: '1742434383045'
      sourceHandle: source
      target: '1742434318366'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: template-transform
        targetType: llm
      id: 1742434318366-source-1742434616785-target
      selected: false
      source: '1742434318366'
      sourceHandle: source
      target: '1742434616785'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: assigner
      id: 1742268516158-1742436050605-1742436161345-target
      selected: false
      source: '1742268516158'
      sourceHandle: '1742436050605'
      target: '1742436161345'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: assigner
      id: 1742268574820-source-17426938619580-target
      selected: false
      source: '1742268574820'
      sourceHandle: source
      target: '17426938619580'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 1742268541036-source-1742697648839-target
      selected: false
      source: '1742268541036'
      sourceHandle: source
      target: '1742697648839'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: llm
      id: 1742697648839-source-1742268574820-target
      selected: false
      source: '1742697648839'
      sourceHandle: source
      target: '1742268574820'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1742695585674-source-1742873522807-target
      selected: false
      source: '1742695585674'
      sourceHandle: source
      target: '1742873522807'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: code
      id: 1742873006355-source-1742695585674-target
      selected: false
      source: '1742873006355'
      sourceHandle: source
      target: '1742695585674'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: 1742434616785-source-1742271075170-target
      selected: false
      source: '1742434616785'
      sourceHandle: source
      target: '1742271075170'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: question-classifier
      id: 1742268516158-1-1743298467743-target
      selected: false
      source: '1742268516158'
      sourceHandle: '1'
      target: '1743298467743'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: llm
      id: 1743298467743-1-1742268678777-target
      selected: false
      source: '1743298467743'
      sourceHandle: '1'
      target: '1742268678777'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: question-classifier
        targetType: llm
      id: 1743298467743-2-1743298593001-target
      selected: false
      source: '1743298467743'
      sourceHandle: '2'
      target: '1743298593001'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: code
      id: 1743298593001-source-17432988044960-target
      selected: false
      source: '1743298593001'
      sourceHandle: source
      target: '17432988044960'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: code
      id: 17432988044960-source-17432988291020-target
      selected: false
      source: '17432988044960'
      sourceHandle: source
      target: '17432988291020'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: llm
      id: 17432988291020-source-1743298860520-target
      selected: false
      source: '17432988291020'
      sourceHandle: source
      target: '1743298860520'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: llm
        targetType: answer
      id: 1743298860520-source-1743299279291-target
      selected: false
      source: '1743298860520'
      sourceHandle: source
      target: '1743299279291'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: answer
      id: 17432988291020-fail-branch-1743299887071-target
      selected: false
      source: '17432988291020'
      sourceHandle: fail-branch
      target: '1743299887071'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: code
      id: 17426938619580-source-1743382507830-target
      selected: false
      source: '17426938619580'
      sourceHandle: source
      target: '1743382507830'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: code
        targetType: assigner
      id: 1743382507830-source-1742873006355-target
      selected: false
      source: '1743382507830'
      sourceHandle: source
      target: '1742873006355'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: start
        targetType: if-else
      id: 1742268499271-source-1743973729940-target
      selected: false
      source: '1742268499271'
      sourceHandle: source
      target: '1743973729940'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: question-classifier
      id: 1743973729940-true-1742268516158-target
      selected: false
      source: '1743973729940'
      sourceHandle: 'true'
      target: '1742268516158'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: if-else
        targetType: code
      id: 1743973729940-false-1742268541036-target
      selected: false
      source: '1743973729940'
      sourceHandle: 'false'
      target: '1742268541036'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: question-classifier
      id: 1742873522807-source-1742268516158-target
      selected: false
      source: '1742873522807'
      sourceHandle: source
      target: '1742268516158'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        sourceType: assigner
        targetType: answer
      id: 1742436161345-source-1742436269084-target
      selected: false
      source: '1742436161345'
      sourceHandle: source
      target: '1742436269084'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: 开始节点
        selected: false
        title: 开始
        type: start
        variables: []
      height: 81
      id: '1742268499271'
      position:
        x: -1775.3462985863632
        y: 341.55607869345965
      positionAbsolute:
        x: -1775.3462985863632
        y: 341.55607869345965
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        classes:
        - id: '1'
          name: 查询/分析
        - id: '1742271280811'
          name: 修改
        - id: '1742272605016'
          name: 确认/其他
        - id: '1742436050605'
          name: 重置
        - id: '1742436518528'
          name: 新增
        - id: '1742519512976'
          name: 删除
        desc: 对用户问题进行分类
        instruction: "你是一个智能分类助手。根据用户输入{{#sys.query#}}，按以下规则分类：\n\n1. **查询/分析**：检索记录或分析数据，含关键词：查询、搜索、查找、查、详情、状态、分析、统计、多少、总数等。\n\
          \   - 示例：“查询 TKT-2307-0001 状态”“统计工单数量”\n\n2. **修改**：更改记录，含关键词：修改、更改、变更、更新。\n\
          \   - 示例：“修改 TKT-2307-0001 状态为已解决”\n\n3. **确认/其他**：含关键词：保存、确认、是、好、确定，或无法归类。\
          \ \n  - 示例：“保存”“是”“继续”\n\n4. **重置**：重置或清空，含关键词：重置、重新开始、清空。\n   - 示例：“重置所有数据”\n\
          \n5. **新增**：添加新记录，含关键词：添加、新增、创建（无统计/分析词）。\n   - 示例：“新增一条工单”\n\n6. **删除**：删除记录，含关键词：删除、移除、取消。\n\
          \   - 示例：“删除 TKT-2307-0001”\n\n**规则**：\n- 多特征冲突（如“新增并统计”），优先“查询/分析”。\n-\
          \ “新增”若涉统计/分析，归“查询/分析”。\n- 无法判断，默认“确认/其他”。"
        instructions: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        query_variable_selector:
        - '1742268499271'
        - sys.query
        selected: false
        title: 问题分类器
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 339
      id: '1742268516158'
      position:
        x: 22.04759134228425
        y: 373.16598963654735
      positionAbsolute:
        x: 22.04759134228425
        y: 373.16598963654735
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\n\ndef main() -> dict:\n    # Flask\
          \ 服务端点\n    api_url = \"http://192.168.0.32:5003/get_schema\"\n    \n  \
          \  # 创建请求对象\n    req = urllib.request.Request(api_url, headers={\"Content-Type\"\
          : \"application/json\"})\n    \n    try:\n        # 发送请求并获取响应\n        with\
          \ urllib.request.urlopen(req) as response:\n            # 读取并解码响应\n    \
          \        schema_data = json.loads(response.read().decode('utf-8'))\n   \
          \         \n            # 检查 schema_data 是否为字典\n            if isinstance(schema_data,\
          \ dict):\n                # 将 schema_data 转换为 JSON 字符串列表（与案例一致）\n      \
          \          result_list = [json.dumps(schema_data, ensure_ascii=False)]\n\
          \                return {'result': result_list}  # 返回字符串列表\n           \
          \ else:\n                raise Exception(\"Unexpected response format: Expected\
          \ a dictionary.\")\n    except Exception as e:\n        raise Exception(f\"\
          Error: {str(e)}\")"
        code_language: python3
        desc: 表结构获取
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 表结构获取（多表对应）
        type: code
        variables: []
      height: 81
      id: '1742268541036'
      position:
        x: -1007.4649189781278
        y: 534.1059522402564
      positionAbsolute:
        x: -1007.4649189781278
        y: 534.1059522402564
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1742268541036'
          - result
        desc: 整理表结构信息
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: chatgpt-4o-latest
          provider: langgenius/openai/openai
        prompt_template:
        - id: 2d43387d-6324-4b7d-b074-91011da88051
          role: system
          text: 你是一个数据结构整理助手。
        - id: e7c163c0-bd3b-4da9-b346-66d6e68dedff
          role: user
          text: '以下是从数据库获取的原始表结构 JSON 数据（可能是一个数组）：{{#context#}}

            请从数组中提取第一个 JSON 字符串，并确保输出为一个完整的、有效的 JSON 对象，包含所有表结构信息。

            注意：

            - 输出必须是一个单一的 JSON 对象，格式为 {"table1": {...}, "table2": {...}, ...}。

            - 确保每个表定义之间用逗号分隔，且整体用大括号 {} 包裹。

            - 不得添加换行符、Markdown 标记（如 ```json）或其他非 JSON 字符。

            - 如果输入数据量较大，优先确保 JSON 结构的完整性，避免截断。

            - 如果输入无效或无法解析，返回空对象 "{}"。

            - 在生成 JSON 时，逐表检查，确保每对键值对后添加逗号，最后一表除外。

            示例：

            - 输入：[{"clazz": {"fields": {...}}, "dept": {"fields": {...}}}]

            - 输出：{"clazz": {"fields": {...}}, "dept": {"fields": {...}}}'
        selected: false
        title: 整理表结构信息
        type: llm
        variables: []
        vision:
          enabled: false
      height: 117
      id: '1742268574820'
      position:
        x: -1002.3428721566297
        y: 806.0069721571012
      positionAbsolute:
        x: -1002.3428721566297
        y: 806.0069721571012
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: mySQL SELECT 查询
        model:
          completion_params: {}
          mode: chat
          name: chatgpt-4o-latest
          provider: langgenius/openai/openai
        prompt_template:
        - id: 20df984b-5a8c-47c8-8b2a-f54123aebe6e
          role: system
          text: '根据用户问题{{#sys.query#}}生成一个合法的 MySQL SELECT 查询语句


            '
        - id: c58dba27-e81c-48bd-a77d-7f6984c8266e
          role: user
          text: "1. 使用表结构{{#conversation.biaojiegou_save#}}中的表和字段，表名从{{#conversation.table_names#}}中动态获取。\n\
            2. 只用简体中文，不用繁体中文。\n3. 输出完整 SQL 语句，不加注释、换行符或 ```sql 标记。\n4. 字符串值用单引号，数值不加引号。\n\
            5. 如果用户查询涉及多表（如“员工和工作经历”），根据表结构中的外键关系（foreign_keys）使用 LEFT JOIN 关联相关表，主表基于用户意图确定。\n\
            \n特别注意：\n- 从中动态识别主键字段（例如标记为 '主键' 或第一个字段），读取其类型和长度（例如 'varchar(9)'）。\n\
            - 根据数据示例中的样本数据获取主键格式（例如前缀和长度，主键通常为id或编号）。\n- 如果用户输入包含“第X号数据”或纯数字（如“查询第647号数据”或\"\
            647\"）：\n  - 提取数字 X（例如 647）。\n  - 参考样本数据{{#conversation.data_sample#}}中的主键值（例如\
            \ 'REP000001'）：\n    - 若主键为 varchar 类型，提取前缀（如 'REP'），补齐 X 至样本长度一致（例如 'REP000647'）。\n\
            \    - 若无前缀，补齐为纯数字匹配字段长度（例如 '000000647'）。\n  - 生成查询：SELECT * FROM [表名]\
            \ WHERE [主键字段] = '[生成的值]'。\n- 如果用户输入完整编号（如 'REP000777'），精确匹配：WHERE [主键字段]\
            \ = 'REP000777'。\n- 如果查询涉及多表（如“员工ID为6的工作经历”），识别主表（例如 emp）和关联表（例如 emp_expr），使用\
            \ LEFT JOIN，例如：\n  - SELECT e.id AS emp_id, e.name, ee.begin, ee.end,\
            \ ee.company, ee.job FROM emp e LEFT JOIN emp_expr ee ON e.id = ee.emp_id\
            \ WHERE e.id = 6\n- 如果输入模糊或无法推断意图，返回：“请澄清你的查询条件，例如完整编号或具体字段。”"
        selected: false
        title: mySQL SELECT 查询
        type: llm
        variables: []
        vision:
          enabled: false
      height: 117
      id: '1742268678777'
      position:
        x: 1066.144904177929
        y: -234.865043347855
      positionAbsolute:
        x: 1066.144904177929
        y: -234.865043347855
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import re\n\ndef main(sql_string: str) -> dict:\n    sql_string = re.sub(r'```sql\\\
          s*', '', sql_string)\n    sql_string = re.sub(r'\\s*```', '', sql_string)\n\
          \    sql_string = sql_string.replace('\\n', ' ')\n    sql_string = ' '.join(sql_string.split())\n\
          \    return {\"result\": sql_string}"
        code_language: python3
        desc: 整理查询语句
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 整理语句 - 查询
        type: code
        variables:
        - value_selector:
          - '1742268678777'
          - text
          variable: sql_string
      height: 81
      id: '1742268810496'
      position:
        x: 1377.8032214848256
        y: -234.865043347855
      positionAbsolute:
        x: 1377.8032214848256
        y: -234.865043347855
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\n\ndef main(sql_query: str) -> dict:\n\
          \    # Flask 服务端点\n    api_url = \"http://192.168.0.32:5003/execute_query\"\
          \n    \n    # 请求体\n    payload = {\n        \"sql_query\": sql_query\n \
          \   }\n    \n    # 将请求体转换为 JSON 字符串\n    data = json.dumps(payload).encode('utf-8')\n\
          \    \n    # 创建请求对象\n    req = urllib.request.Request(api_url, data=data,\
          \ headers={\"Content-Type\": \"application/json\"})\n    \n    try:\n  \
          \      # 发送请求并获取响应\n        with urllib.request.urlopen(req) as response:\n\
          \            # 读取并解码响应\n            result_data = json.loads(response.read().decode('utf-8'))\
          \  \n            # 将结果转换为字符串格式\n            result_str = json.dumps(result_data,\
          \ ensure_ascii=False)  # 确保中文字符正常显示\n            return {'result': result_str}\
          \  # 返回字符串类型的结果\n    except Exception as e:\n        raise Exception(f\"\
          Error: {str(e)}\")"
        code_language: python3
        desc: 根据sql语句链接数据库并进行查询
        error_strategy: fail-branch
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 数据库查询
        type: code
        variables:
        - value_selector:
          - '1742268810496'
          - result
          variable: sql_query
      height: 117
      id: '1742268852484'
      position:
        x: 1719.632203505868
        y: -243.87560947035922
      positionAbsolute:
        x: 1719.632203505868
        y: -243.87560947035922
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: contains
            id: 82bbf851-5ae9-4b97-98c7-702c4f7bd121
            value: '[]'
            varType: string
            variable_selector:
            - '1742268852484'
            - result
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: 条件分支
        type: if-else
      height: 125
      id: '1742269174054'
      position:
        x: 2295.736133987042
        y: -399.59722952739503
      positionAbsolute:
        x: 2295.736133987042
        y: -399.59722952739503
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 没有找到你想查找的数据,重新尝试或输入完整的编号
        desc: ''
        selected: false
        title: 直接回复 2
        type: answer
        variables: []
      height: 115
      id: '1742269194306'
      position:
        x: 2759.3463441093145
        y: -448.5639831139172
      positionAbsolute:
        x: 2759.3463441093145
        y: -448.5639831139172
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '查询结果：

          {{#1742434616785.text#}}

          '
        desc: ''
        selected: false
        title: 直接回复 2
        type: answer
        variables: []
      height: 102
      id: '1742271075170'
      position:
        x: 3816.0192506477306
        y: -291.49735376516844
      positionAbsolute:
        x: 3816.0192506477306
        y: -291.49735376516844
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '请澄清你的查询条件，例如完整编号或具体数字


          '
        desc: ''
        selected: false
        title: 直接回复 8
        type: answer
        variables: []
      height: 115
      id: '1742433373758'
      position:
        x: 2295.736133987042
        y: -216.34112361330028
      positionAbsolute:
        x: 2295.736133987042
        y: -216.34112361330028
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        selected: false
        template: '{{ content2 }}'
        title: 查询content2转换
        type: template-transform
        variables:
        - value_selector:
          - '1742434383045'
          - concontSelect
          variable: content2
      height: 53
      id: '1742434318366'
      position:
        x: 3131.3314912662872
        y: -280.2204585594876
      positionAbsolute:
        x: 3131.3314912662872
        y: -280.2204585594876
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gpt-4o-mini
          provider: langgenius/openai/openai
        parameters:
        - description: 提取concont部分参数
          name: concontSelect
          required: false
          type: array[object]
        query:
        - '1742268852484'
        - result
        reasoning_mode: prompt
        selected: false
        title: 参数提取器 2
        type: parameter-extractor
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1742434383045'
      position:
        x: 2781.2366709427192
        y: -280.2204585594876
      positionAbsolute:
        x: 2781.2366709427192
        y: -280.2204585594876
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1742268852484'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        prompt_template:
        - id: b77a5ee5-693c-4e65-8c99-ad58fed73a9a
          role: system
          text: '请将{{#context#}}的内容

            针对用户问的问题：{{#sys.query#}}

            输出给用户


            要求：

            1. 理解用户问题的意图，将输入内容整理为易懂的结构。

            2. 如果结果包含多条记录，按记录分段展示，每段以 "记录 X" 开头（X 为序号，从 1 开始）。

            3. 根据意图选择相关字段，避免冗余信息。

            4. 如果需要，生成简洁的自然语言描述或表格形式（纯文本，不用 Markdown）。

            5. 如果数据为空（即 context 为空或无记录），返回“无数据”。

            6. 如果数据仅包含部分相关信息（例如，只有班级信息而无学生信息），仍展示可用数据，并根据用户意图选择关键字段输出。

            7. 输出为纯文本，不使用 Markdown 标记或额外符号（如 ```）。'
        selected: false
        title: LLM 6
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1742434616785'
      position:
        x: 3488.6085528396075
        y: -300.22045855948755
      positionAbsolute:
        x: 3488.6085528396075
        y: -300.22045855948755
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_modify
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - delete_show
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - lastest_content_production
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - content_new
          write_mode: over-write
        - input_type: variable
          operation: clear
          value: ''
          variable_selector:
          - conversation
          - save_content
          write_mode: over-write
        selected: false
        title: 重置检索结果
        type: assigner
        version: '2'
      height: 199
      id: '1742436161345'
      position:
        x: 668.2651670318155
        y: 341.55607869345965
      positionAbsolute:
        x: 668.2651670318155
        y: 341.55607869345965
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 之前检索到的文档块不再被作为修改目标
        desc: ''
        selected: false
        title: 直接回复 -重置
        type: answer
        variables: []
      height: 115
      id: '1742436269084'
      position:
        x: 1061.0922607484001
        y: 346.83411033655125
      positionAbsolute:
        x: 1061.0922607484001
        y: 346.83411033655125
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1742268574820'
          - text
          variable_selector:
          - conversation
          - biaojiegou_save
          write_mode: over-write
        selected: false
        title: 变量赋值 3 表结构赋值
        type: assigner
        version: '2'
      height: 87
      id: '17426938619580'
      position:
        x: -637.2360856757366
        y: 527.1233189382341
      positionAbsolute:
        x: -637.2360856757366
        y: 527.1233189382341
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\nimport re\n\ndef main(table_names:\
          \ list, schema_str: str) -> dict:\n    api_url = \"http://192.168.0.32:5003/execute_query\"\
          \n    try:\n        print(f\"table_names: {table_names}\")\n        print(f\"\
          schema_str (raw): '{schema_str}'\")\n        if not schema_str or schema_str.strip()\
          \ == \"\":\n            raise Exception(\"Schema string is empty\")\n\n\
          \        # 预处理：清理并修复可能的 JSON 格式问题\n        cleaned_schema_str = schema_str.strip()\n\
          \        # 移除 Markdown 标记和多余空白\n        cleaned_schema_str = re.sub(r'```json\\\
          s*|\\s*```', '', cleaned_schema_str)\n        # 替换多余的换行符和空格\n        cleaned_schema_str\
          \ = re.sub(r'\\s*\\n\\s*', '', cleaned_schema_str)\n        # 修复表定义之间的分隔符问题\n\
          \        cleaned_schema_str = re.sub(r'}\\s*([^{,])', '}, \\\\1', cleaned_schema_str)\
          \  # 添加缺失的逗号\n        cleaned_schema_str = re.sub(r'}{', '}, {', cleaned_schema_str)\
          \  # 修复无逗号的拼接\n        # 确保整体是一个对象\n        if not cleaned_schema_str.startswith('{'):\n\
          \            cleaned_schema_str = '{' + cleaned_schema_str\n        if not\
          \ cleaned_schema_str.endswith('}'):\n            cleaned_schema_str = cleaned_schema_str\
          \ + '}'\n        # 移除末尾多余的逗号\n        cleaned_schema_str = re.sub(r',\\\
          s*}', '}', cleaned_schema_str)\n\n        print(f\"Cleaned schema_str: '{cleaned_schema_str}'\"\
          )\n        try:\n            schema = json.loads(cleaned_schema_str)\n \
          \           print(f\"Parsed schema: {schema}\")\n        except json.JSONDecodeError\
          \ as e:\n            print(f\"JSON decode error at position {e.pos}: {e.msg}\"\
          )\n            print(f\"Problematic snippet: '{cleaned_schema_str[max(0,\
          \ e.pos-10):e.pos+10]}'\")\n            # 尝试逐步截断修复\n            try:\n \
          \               last_valid_pos = cleaned_schema_str.rfind('}', 0, e.pos)\
          \ + 1\n                if last_valid_pos > 1:\n                    cleaned_schema_str\
          \ = cleaned_schema_str[:last_valid_pos]\n                    schema = json.loads(cleaned_schema_str)\n\
          \                    print(f\"Recovered partial schema: {schema}\")\n  \
          \              else:\n                    raise Exception(\"Unable to recover\
          \ valid JSON\")\n            except Exception:\n                schema =\
          \ {}  # 最终 fallback 到空对象\n                print(\"Fallback to empty schema\"\
          )\n\n        result_data = {}\n        for table in table_names:\n     \
          \       sql_query = f\"SELECT * FROM {table} LIMIT 1\"\n            print(f\"\
          SQL query for {table}: {sql_query}\")\n            payload = {\"sql_query\"\
          : sql_query}\n            data = json.dumps(payload).encode('utf-8')\n \
          \           req = urllib.request.Request(api_url, data=data, headers={\"\
          Content-Type\": \"application/json\"})\n            with urllib.request.urlopen(req)\
          \ as response:\n                table_data = json.loads(response.read().decode('utf-8'))\n\
          \                result_data[table] = table_data\n\n        result_str =\
          \ json.dumps(result_data, ensure_ascii=False)\n        return {'result':\
          \ result_str}\n    except Exception as e:\n        raise Exception(f\"Error:\
          \ {str(e)}\")"
        code_language: python3
        desc: 返回数据库的一条数据作为示例给LLM（暂时是硬编码）
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 数据示例
        type: code
        variables:
        - value_selector:
          - '1743382507830'
          - result
          variable: table_names
        - value_selector:
          - '1742268574820'
          - text
          variable: schema_str
      height: 97
      id: '1742695585674'
      position:
        x: -267.99524063399167
        y: 671.1233189382341
      positionAbsolute:
        x: -267.99524063399167
        y: 671.1233189382341
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '1742268541036'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gpt-4o-mini
          provider: langgenius/openai/openai
        prompt_template:
        - id: e0a4fb31-f74d-4dcd-816c-c2d2da20e271
          role: system
          text: '根据以下从数据库获取的表结构 JSON 数据：{{#context#}}，提取所有表名，遵循以下规则：

            1. 从 JSON 数据中识别所有表名（JSON 对象的顶级键）。

            2. 输出纯文本表名列表，每行一个表名，不带任何符号（如引号、花括号、冒号等）。

            3. 不添加额外说明或标记（如 ```）。


            示例：

            - 输入：

            {"result": ["{\"tickets\": {\"fields\": {\"ticket_id\": {\"type\": \"varchar(20)\"}}},
            \"customers\": {\"fields\": {\"customer_id\": {\"type\": \"int\"}}}}"]}

            - 输出：

            tickets

            customers


            表结构数据：{{#context#}}'
        selected: false
        title: 获取表名
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1742697648839'
      position:
        x: -1007.4649189781278
        y: 671.1233189382341
      positionAbsolute:
        x: -1007.4649189781278
        y: 671.1233189382341
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1743382507830'
          - result
          variable_selector:
          - conversation
          - table_names
          write_mode: over-write
        selected: false
        title: 变量赋值 - 获取表名
        type: assigner
        version: '2'
      height: 87
      id: '1742873006355'
      position:
        x: -645.8552699732197
        y: 833.8192642709555
      positionAbsolute:
        x: -645.8552699732197
        y: 833.8192642709555
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        items:
        - input_type: variable
          operation: over-write
          value:
          - '1742695585674'
          - result
          variable_selector:
          - conversation
          - data_sample
          write_mode: over-write
        selected: false
        title: 变量赋值  - 数据示例
        type: assigner
        version: '2'
      height: 87
      id: '1742873522807'
      position:
        x: -267.99524063399167
        y: 527.1233189382341
      positionAbsolute:
        x: -267.99524063399167
        y: 527.1233189382341
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        classes:
        - id: '1'
          name: 查询
        - id: '2'
          name: 分析
        desc: ''
        instruction: "你是一个智能分类助手。根据用户输入的问题：{{#sys.query#}}，按照以下规则将其分类为“查询”或“分析”\n\n\
          1. **查询**：\n   - 用户意图是检索具体工单的完整详细信息（所有字段）。\n   - 包含关键词：查询、搜索、查找、查、具体、详情、状态、内容等。\n\
          \   - 必须涉及特定工单编号（如 TKT-2307-0001，也可以是适当模糊，如第624条数据）或明确要求完整记录。\n   - 示例：\n\
          \     - “查询 TKT-2307-0001 的状态”\n     - “查一下 TKT-1019-0135 ，TKT-2307-0001的详情”\n\
          \     - “搜索 TKT-2307-0001 的完整信息”\n     - ‘’查询第624号数据‘’\n\n2. **分析**：\n \
          \  - 用户意图是统计、汇总、分析整体数据，或仅列举工单编号（不返回完整记录）。\n   - 包含关键词：统计、分析、汇总、多少、总数、分布、平均、趋势、比例、查找、列出等。\n\
          \   - 示例：\n     - “数据表中一共多少工单”\n     - “统计每个部门的工单数量”\n     - “查找销售部的紧急工单的编号”\n\
          \     - “列出 2024-01-01 的工单编号”\n     - “分析紧急工单的分布情况”\n"
        instructions: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: gpt-4o-mini
          provider: langgenius/openai/openai
        query_variable_selector:
        - '1742268499271'
        - sys.query
        selected: false
        title: 查询/分析分类
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 167
      id: '1743298467743'
      position:
        x: 701.7365667382708
        y: -133.56425069524505
      positionAbsolute:
        x: 701.7365667382708
        y: -133.56425069524505
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        prompt_template:
        - id: f0255981-27db-4449-acdb-b69b151bc5f2
          role: system
          text: 你是一个数据库分析助手。根据用户输入和表结构，生成一个合法的 MySQL 分析语句（如使用 COUNT、AVG、SUM、GROUP
            BY 等）
        - id: 9875e6b6-2f51-4307-8150-2e2fbcfb47d7
          role: user
          text: "1. 用户输入：{{#sys.query#}}\n2. 表名：{{#conversation.table_names#}} \n\
            3. 表结构：{{#conversation.biaojiegou_save#}} \n4. 数据示例：{{#conversation.data_sample#}}\n\
            \n规则：\n- 只生成分析相关的 SQL（如 COUNT、AVG、SUM、GROUP BY），不生成简单查询。\n- 如果用户输入涉及多表（如“emp\
            \ 和 dept”），根据表结构中的 foreign_keys 生成带 JOIN 的 SQL。\n- 使用 LEFT JOIN 连接相关表，确保字段名和类型正确。\n\
            - 如果输入只涉及单表，从 table_names 中选择。\n- 输出完整 SQL 语句，不加注释、换行符或 ```sql 标记。\n-\
            \ 如果输入模糊或无法生成有效分析语句，返回：“请澄清你的分析需求，例如‘统计每个部门的员工数’。”"
        selected: false
        title: Mysql 分析语句编辑
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1743298593001'
      position:
        x: 1066.144904177929
        y: 44.32737306786558
      positionAbsolute:
        x: 1066.144904177929
        y: 44.32737306786558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import re\n\ndef main(sql_string: str) -> dict:\n    sql_string = re.sub(r'```sql\\\
          s*', '', sql_string)\n    sql_string = re.sub(r'\\s*```', '', sql_string)\n\
          \    sql_string = sql_string.replace('\\n', ' ')\n    sql_string = ' '.join(sql_string.split())\n\
          \    return {\"result\": sql_string}"
        code_language: python3
        desc: 整理查询语句
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 整理语句 - 分析
        type: code
        variables:
        - value_selector:
          - '1743298593001'
          - text
          variable: sql_string
      height: 81
      id: '17432988044960'
      position:
        x: 1383.8660877508673
        y: 44.32737306786558
      positionAbsolute:
        x: 1383.8660877508673
        y: 44.32737306786558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import urllib.request\nimport json\n\ndef main(sql_query: str) -> dict:\n\
          \    # Flask 服务端点\n    api_url = \"http://192.168.0.32:5003/execute_query\"\
          \n    \n    # 请求体\n    payload = {\n        \"sql_query\": sql_query\n \
          \   }\n    \n    # 将请求体转换为 JSON 字符串\n    data = json.dumps(payload).encode('utf-8')\n\
          \    \n    # 创建请求对象\n    req = urllib.request.Request(api_url, data=data,\
          \ headers={\"Content-Type\": \"application/json\"})\n    \n    try:\n  \
          \      # 发送请求并获取响应\n        with urllib.request.urlopen(req) as response:\n\
          \            # 读取并解码响应\n            result_data = json.loads(response.read().decode('utf-8'))\
          \  \n            # 将结果转换为字符串格式\n            result_str = json.dumps(result_data,\
          \ ensure_ascii=False)  # 确保中文字符正常显示\n            return {'result': result_str}\
          \  # 返回字符串类型的结果\n    except Exception as e:\n        raise Exception(f\"\
          Error: {str(e)}\")"
        code_language: python3
        desc: 根据sql语句链接数据库并进行查询
        error_strategy: fail-branch
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 数据库查询 - 分析
        type: code
        variables:
        - value_selector:
          - '17432988044960'
          - result
          variable: sql_query
      height: 117
      id: '17432988291020'
      position:
        x: 1719.632203505868
        y: 44.32737306786558
      positionAbsolute:
        x: 1719.632203505868
        y: 44.32737306786558
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: true
          variable_selector:
          - '17432988291020'
          - result
        desc: ''
        model:
          completion_params:
            temperature: 0.7
          mode: chat
          name: grok-beta
          provider: langgenius/x/x
        prompt_template:
        - id: f65333f1-6be2-451a-8aa6-3511551beefd
          role: system
          text: 你是一个数据分析助手。根据以下 JSON 数据和表结构，将分析结果整理为易读的表格形式。
        - id: 9a927872-bbad-427f-96fc-d9ee86dfc401
          role: user
          text: "遵循以下规则：\n1. **输入数据**：\n- 分析结果 JSON：{{#context#}}\n- 表结构：{{#conversation.biaojiegou_save#}}\n\
            - 表名：{{#conversation.table_names#}}\n\n2. **规则**：\n- 根据用户问题{{#sys.query#}}的意图，灵活选择输出形式：\n\
            \  - 如果意图是统计或结构化展示（如“统计数量”“分布情况”），将 JSON 数据解析为表格，字段名作为表头，值作为行数据。\n  -\
            \ 如果意图是内容分析（如“分析日志内容”“描述 info”），直接分析字段内容，生成自然语言描述，不使用表格。\n- 对于表格输出：\n\
            \  - 如果结果涉及多表（如 emp 和 dept），按表名分组展示，每组一个表格。\n  - 使用纯文本绘制表格，从表结构中识别字段含义。\n\
            \  - 如果字段是数值类型（如 COUNT、AVG），在表头后加单位（如 “数量”、“平均值”）。\n- 输出纯文本，不使用 Markdown\
            \ 或代码块标记。\n\n3. **分析与建议**：\n- 趋势识别：根据数据判断变化趋势（如数量增加/减少、日期递增/递减）。\n- 异常检测：识别显著偏离平均值的数据（如某类别数量远高于其他，或某平均值异常）。\n\
            - 建议生成：根据趋势和异常提供简洁建议（如“关注异常类别”“优化某字段”）。\n- 分析和建议紧跟输出后，每项以“-”开头，逐行展示。\n"
        selected: true
        title: 结果分析
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1743298860520'
      position:
        x: 2040.8463479812117
        y: -61.352875591861604
      positionAbsolute:
        x: 2040.8463479812117
        y: -61.352875591861604
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1743298860520.text#}}'
        desc: ''
        selected: false
        title: 直接回复 20
        type: answer
        variables: []
      height: 102
      id: '1743299279291'
      position:
        x: 2363.225521661164
        y: -61.352875591861604
      positionAbsolute:
        x: 2363.225521661164
        y: -61.352875591861604
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: 请澄清你的分析条件
        desc: ''
        selected: false
        title: 直接回复 21
        type: answer
        variables: []
      height: 99
      id: '1743299887071'
      position:
        x: 2047.7385381111935
        y: 82.72890137809694
      positionAbsolute:
        x: 2047.7385381111935
        y: 82.72890137809694
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "def main(table_names_str: str) -> dict:\n    # 将换行符分隔的字符串拆分为数组，去除空行和多余空格\n\
          \    table_names = [name.strip() for name in table_names_str.split('\\n')\
          \ if name.strip()]\n    return {\"result\": table_names}"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: array[string]
        selected: false
        title: 转换数组
        type: code
        variables:
        - value_selector:
          - '1742697648839'
          - text
          variable: table_names_str
      height: 53
      id: '1743382507830'
      position:
        x: -637.2360856757366
        y: 706.3664139704869
      positionAbsolute:
        x: -637.2360856757366
        y: 706.3664139704869
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        cases:
        - case_id: 'true'
          conditions:
          - comparison_operator: not empty
            id: 4dddf4e3-6f03-4e2e-9237-472f2105f08b
            value: ''
            varType: string
            variable_selector:
            - conversation
            - biaojiegou_save
          - comparison_operator: not empty
            id: b53a77ff-cc6c-4857-9749-908849cec4f9
            value: ''
            varType: array[string]
            variable_selector:
            - conversation
            - table_names
          - comparison_operator: not empty
            id: 5cf730da-6054-4354-ac8b-b67f56124be3
            value: ''
            varType: string
            variable_selector:
            - conversation
            - data_sample
          id: 'true'
          logical_operator: and
        desc: ''
        selected: false
        title: 条件分支 - 事前作业确认
        type: if-else
      height: 177
      id: '1743973729940'
      position:
        x: -1362.5362998966607
        y: 341.55607869345965
      positionAbsolute:
        x: -1362.5362998966607
        y: 341.55607869345965
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: -817.292491585054
      y: 642.5357260652545
      zoom: 0.6597539553864475
