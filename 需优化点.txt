(自我记录，暂时不需要管和参考这个文件，汇总结束后再考虑优化)
1.输出内容（日志）过于多（特别是无意义的），更简洁一点
2.---节点: 格式化 Schema---时间略长（可增加可视化？？）

3.条件令牌分配(应该已解决)
检查用户名"bob"的用户是否拥有"openai"的API令牌。
如果没有，为其添加一个"openai"的API令牌，令牌值为"tok_bob_2"，创建时间为2025年5月3日14:00:00。
然后，为"bob"创建一个标题为"API集成"的提示，类别为"coding"，内容为"编写一个连接外部API的脚本"，时间戳与令牌相同。
（此问题复合了查询与新增，暂时无法处理）
（此问题包含了验证，暂时无法处理）

4.复合要求(应该已解决)
对于所有拥有"huggingface"API令牌的用户，将其令牌提供者更改为"openai"，并将令牌值更新为"tok_migrated_[username]"。将这些令牌的updated_at时间戳设为2025年5月3日11:00:00。
同时，为每个受影响的用户创建一个标题为"迁移通知"的提示，类别为"writing"，内容为"撰写系统升级通知"，时间戳相同。
（现阶段还不能进行修改新增同时实现）

5.当前时间
目前ai输出的当前时间大概是美国时间？最好改为日本


6.记录所有修改记录


7.利用多表联合，未来可考虑输出为图表或者Excel


8.复杂指令，即使非复合需求也常常被认为是复合


9.添加复合流程的删除操作(应该已解决)


10.出现唯一键重复添加应需做到前端提醒而非500


11.修改表结构？（太难）

12.是否可以外层再套一个AI智能体？(制作成MCP)


13.可以实现创建新表等功能

# --- 新增待优化点 (来自复合流程随机占位符讨论) ---
14. **通用化随机占位符处理机制**:
    - **问题现状**: 当前 `_process_value` 在处理 `{{random(type)}}` 时，对于不支持的 `type` (如 `japanese_name_4_chars`) 会导致占位符处理失败或返回原始占位符，进而引发后端错误（如唯一键冲突）。
    - **当前临时解决**: (如果后续实施) 可能会为特定的 `japanese_name_4_chars` 添加一个硬编码的或非常简单的占位生成逻辑以通过当前测试。
    - **长远目标**: 设计一个更灵活的随机内容生成机制，例如：
        - 随机生成器注册表：允许动态注册不同类型的随机内容生成函数 (如生成指定长度和语言的姓名、地址、邮箱、特定格式的字符串等)。
        - `{{random(spec)}}` 中的 `spec` 可以支持更丰富的定义，如 `{{random(name, lang=jp, length=4)}}` 或 `{{random(string, length=10, charset=alphanum)}}`。
        - `_process_value` 能够解析 `spec`，查找对应的生成器并传递参数。
    - **优点**: 提高系统的灵活性和可扩展性，方便未来支持更多种类的随机数据生成需求，而无需频繁修改核心的占位符处理代码。
    问题现状补充：即使占位符被解析，如果同一个随机占位符（如 {{random(type)}}）在原始计划中被用于多个需要保证唯一性的字段（例如，在一次批量更新中为多个用户的 username 字段都使用 {{random(name)}}），当前的占位符处理逻辑（对原始计划中的占位符进行一次性替换）会导致所有这些字段都被赋上相同的随机值，从而引发唯一键冲突。
长远目标应考虑：确保在批量操作中，即使源计划中使用了相同的随机占位符模式，最终应用到不同记录的唯一字段上的值也应该是独立生成的、唯一的随机值。这可能需要在后端 /execute_batch_operations 处理这类特定随机占位符时，对每个受影响的行独立生成随机值，或者LangGraph端在生成最终计划时就确保这一点。